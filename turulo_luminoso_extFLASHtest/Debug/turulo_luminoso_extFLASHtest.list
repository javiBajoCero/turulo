
turulo_luminoso_extFLASHtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003164  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080032a0  080032a0  000132a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800334c  0800334c  0001334c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003350  08003350  00013350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000004  08003354  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000007c  20000014  08003364  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000090  08003364  00020090  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c112  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001eeb  00000000  00000000  0002c156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000010e8  00000000  00000000  0002e048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ff0  00000000  00000000  0002f130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002067a  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c469  00000000  00000000  0005079a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000cf12f  00000000  00000000  0005cc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0012bd32  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000449c  00000000  00000000  0012bd84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08003288 	.word	0x08003288

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08003288 	.word	0x08003288

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr

080001ae <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001ae:	b580      	push	{r7, lr}
 80001b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b2:	2002      	movs	r0, #2
 80001b4:	f7ff ffe2 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b8:	2001      	movs	r0, #1
 80001ba:	f7ff ffdf 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001be:	2008      	movs	r0, #8
 80001c0:	f7ff ffdc 	bl	800017c <LL_AHB2_GRP1_EnableClock>

}
 80001c4:	bf00      	nop
 80001c6:	bd80      	pop	{r7, pc}

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fbb7 	bl	8000940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f83b 	bl	800024c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001d6:	f000 f895 	bl	8000304 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f7ff ffe8 	bl	80001ae <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80001de:	f000 f8e5 	bl	80003ac <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  int32_t memstatus=S25FL128S_GetFlashInfo(&flashmemoryinfo);
 80001e2:	4816      	ldr	r0, [pc, #88]	; (800023c <main+0x74>)
 80001e4:	f000 f962 	bl	80004ac <S25FL128S_GetFlashInfo>
 80001e8:	6078      	str	r0, [r7, #4]
          memstatus=S25FL128S_ChipErase(&hqspi, S25FL128S_QPI_MODE);
 80001ea:	2106      	movs	r1, #6
 80001ec:	4814      	ldr	r0, [pc, #80]	; (8000240 <main+0x78>)
 80001ee:	f000 fa42 	bl	8000676 <S25FL128S_ChipErase>
 80001f2:	6078      	str	r0, [r7, #4]
  	  	  memstatus=S25FL128S_WriteEnable(&hqspi, S25FL128S_QPI_MODE);
 80001f4:	2106      	movs	r1, #6
 80001f6:	4812      	ldr	r0, [pc, #72]	; (8000240 <main+0x78>)
 80001f8:	f000 f977 	bl	80004ea <S25FL128S_WriteEnable>
 80001fc:	6078      	str	r0, [r7, #4]
  		  uint32_t data=0xA;
 80001fe:	230a      	movs	r3, #10
 8000200:	603b      	str	r3, [r7, #0]
  		  memstatus=S25FL128S_PageProgram(&hqspi, S25FL128S_QPI_MODE, &data, 0, 4);
 8000202:	463a      	mov	r2, r7
 8000204:	2304      	movs	r3, #4
 8000206:	9300      	str	r3, [sp, #0]
 8000208:	2300      	movs	r3, #0
 800020a:	2106      	movs	r1, #6
 800020c:	480c      	ldr	r0, [pc, #48]	; (8000240 <main+0x78>)
 800020e:	f000 f9e1 	bl	80005d4 <S25FL128S_PageProgram>
 8000212:	6078      	str	r0, [r7, #4]
  		  memstatus=S25FL128S_WriteDisable(&hqspi, S25FL128S_QPI_MODE);
 8000214:	2106      	movs	r1, #6
 8000216:	480a      	ldr	r0, [pc, #40]	; (8000240 <main+0x78>)
 8000218:	f000 f9b2 	bl	8000580 <S25FL128S_WriteDisable>
 800021c:	6078      	str	r0, [r7, #4]
  	  	  memstatus=S25FL128S_EnableMemoryMappedModeSTR(&hqspi, S25FL128S_QPI_MODE);
 800021e:	2106      	movs	r1, #6
 8000220:	4807      	ldr	r0, [pc, #28]	; (8000240 <main+0x78>)
 8000222:	f000 fa53 	bl	80006cc <S25FL128S_EnableMemoryMappedModeSTR>
 8000226:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8000228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800022c:	f000 fc0e 	bl	8000a4c <HAL_Delay>
	  valuepointedbymemPointer=*memPointer;
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <main+0x7c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a04      	ldr	r2, [pc, #16]	; (8000248 <main+0x80>)
 8000238:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1000);
 800023a:	e7f5      	b.n	8000228 <main+0x60>
 800023c:	20000030 	.word	0x20000030
 8000240:	20000048 	.word	0x20000048
 8000244:	20000004 	.word	0x20000004
 8000248:	20000044 	.word	0x20000044

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b09a      	sub	sp, #104	; 0x68
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0320 	add.w	r3, r7, #32
 8000256:	2248      	movs	r2, #72	; 0x48
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f003 f80c 	bl	8003278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]
 800026e:	615a      	str	r2, [r3, #20]
 8000270:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000272:	4b23      	ldr	r3, [pc, #140]	; (8000300 <SystemClock_Config+0xb4>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800027a:	4a21      	ldr	r2, [pc, #132]	; (8000300 <SystemClock_Config+0xb4>)
 800027c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000280:	6013      	str	r3, [r2, #0]
 8000282:	4b1f      	ldr	r3, [pc, #124]	; (8000300 <SystemClock_Config+0xb4>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800028a:	603b      	str	r3, [r7, #0]
 800028c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800028e:	2323      	movs	r3, #35	; 0x23
 8000290:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000296:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800029c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800029e:	2301      	movs	r3, #1
 80002a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a2:	2340      	movs	r3, #64	; 0x40
 80002a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002a6:	2300      	movs	r3, #0
 80002a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80002aa:	23a0      	movs	r3, #160	; 0xa0
 80002ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ae:	2300      	movs	r3, #0
 80002b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b2:	f107 0320 	add.w	r3, r7, #32
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 fdae 	bl	8001e18 <HAL_RCC_OscConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002c2:	f000 f83c 	bl	800033e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80002c6:	236f      	movs	r3, #111	; 0x6f
 80002c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2101      	movs	r1, #1
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 f90a 	bl	8002500 <HAL_RCC_ClockConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80002f2:	f000 f824 	bl	800033e <Error_Handler>
  }
}
 80002f6:	bf00      	nop
 80002f8:	3768      	adds	r7, #104	; 0x68
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	58000400 	.word	0x58000400

08000304 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b094      	sub	sp, #80	; 0x50
 8000308:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800030a:	463b      	mov	r3, r7
 800030c:	2250      	movs	r2, #80	; 0x50
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f002 ffb1 	bl	8003278 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800031c:	2300      	movs	r3, #0
 800031e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000320:	2310      	movs	r3, #16
 8000322:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000324:	463b      	mov	r3, r7
 8000326:	4618      	mov	r0, r3
 8000328:	f002 fcfb 	bl	8002d22 <HAL_RCCEx_PeriphCLKConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000332:	f000 f804 	bl	800033e <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000336:	bf00      	nop
 8000338:	3750      	adds	r7, #80	; 0x50
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}

0800033e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000342:	b672      	cpsid	i
}
 8000344:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000346:	e7fe      	b.n	8000346 <Error_Handler+0x8>

08000348 <LL_AHB2_GRP1_EnableClock>:
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000354:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000356:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4313      	orrs	r3, r2
 800035e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000364:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4013      	ands	r3, r2
 800036a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800036c:	68fb      	ldr	r3, [r7, #12]
}
 800036e:	bf00      	nop
 8000370:	3714      	adds	r7, #20
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800037a:	b480      	push	{r7}
 800037c:	b085      	sub	sp, #20
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000386:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000388:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4313      	orrs	r3, r2
 8000390:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000396:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4013      	ands	r3, r2
 800039c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800039e:	68fb      	ldr	r3, [r7, #12]
}
 80003a0:	bf00      	nop
 80003a2:	3714      	adds	r7, #20
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <MX_QUADSPI_Init+0x44>)
 80003b2:	4a10      	ldr	r2, [pc, #64]	; (80003f4 <MX_QUADSPI_Init+0x48>)
 80003b4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80003b6:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <MX_QUADSPI_Init+0x44>)
 80003b8:	22ff      	movs	r2, #255	; 0xff
 80003ba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <MX_QUADSPI_Init+0x44>)
 80003be:	2201      	movs	r2, #1
 80003c0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <MX_QUADSPI_Init+0x44>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80003c8:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <MX_QUADSPI_Init+0x44>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <MX_QUADSPI_Init+0x44>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <MX_QUADSPI_Init+0x44>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80003da:	4805      	ldr	r0, [pc, #20]	; (80003f0 <MX_QUADSPI_Init+0x44>)
 80003dc:	f000 fdcc 	bl	8000f78 <HAL_QSPI_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80003e6:	f7ff ffaa 	bl	800033e <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000048 	.word	0x20000048
 80003f4:	a0001000 	.word	0xa0001000

080003f8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000400:	f107 030c 	add.w	r3, r7, #12
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
 800040e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a22      	ldr	r2, [pc, #136]	; (80004a0 <HAL_QSPI_MspInit+0xa8>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d13e      	bne.n	8000498 <HAL_QSPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800041a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800041e:	f7ff ffac 	bl	800037a <LL_AHB3_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000422:	2002      	movs	r0, #2
 8000424:	f7ff ff90 	bl	8000348 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	2001      	movs	r0, #1
 800042a:	f7ff ff8d 	bl	8000348 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800042e:	2008      	movs	r0, #8
 8000430:	f7ff ff8a 	bl	8000348 <LL_AHB2_GRP1_EnableClock>
    PD7     ------> QUADSPI_BK1_IO3
    PD3     ------> QUADSPI_BK1_NCS
    PD5     ------> QUADSPI_BK1_IO1
    PD6     ------> QUADSPI_BK1_IO2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000438:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043a:	2302      	movs	r3, #2
 800043c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000442:	2300      	movs	r3, #0
 8000444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000446:	230a      	movs	r3, #10
 8000448:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800044a:	f107 030c 	add.w	r3, r7, #12
 800044e:	4619      	mov	r1, r3
 8000450:	4814      	ldr	r0, [pc, #80]	; (80004a4 <HAL_QSPI_MspInit+0xac>)
 8000452:	f000 fc03 	bl	8000c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000456:	2308      	movs	r3, #8
 8000458:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800045a:	2302      	movs	r3, #2
 800045c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	2300      	movs	r3, #0
 8000460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000462:	2300      	movs	r3, #0
 8000464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000466:	230a      	movs	r3, #10
 8000468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046a:	f107 030c 	add.w	r3, r7, #12
 800046e:	4619      	mov	r1, r3
 8000470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000474:	f000 fbf2 	bl	8000c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 8000478:	23e8      	movs	r3, #232	; 0xe8
 800047a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800047c:	2302      	movs	r3, #2
 800047e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000484:	2300      	movs	r3, #0
 8000486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000488:	230a      	movs	r3, #10
 800048a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800048c:	f107 030c 	add.w	r3, r7, #12
 8000490:	4619      	mov	r1, r3
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <HAL_QSPI_MspInit+0xb0>)
 8000494:	f000 fbe2 	bl	8000c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000498:	bf00      	nop
 800049a:	3720      	adds	r7, #32
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	a0001000 	.word	0xa0001000
 80004a4:	48000400 	.word	0x48000400
 80004a8:	48000c00 	.word	0x48000c00

080004ac <S25FL128S_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval QSPI memory status
  */
int32_t S25FL128S_GetFlashInfo(S25FL128S_Info_t *pInfo)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize = S25FL128S_FLASH_SIZE;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004ba:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize = S25FL128S_SECTOR_SIZE;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004c2:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber = (S25FL128S_FLASH_SIZE/S25FL128S_SECTOR_SIZE);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004ca:	609a      	str	r2, [r3, #8]
  pInfo->ProgPageSize = S25FL128S_PAGE_SIZE;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004d2:	60da      	str	r2, [r3, #12]
  pInfo->ProgPagesNumber = (S25FL128S_FLASH_SIZE/S25FL128S_PAGE_SIZE);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004da:	611a      	str	r2, [r3, #16]

  return S25FL128S_OK;
 80004dc:	2300      	movs	r3, #0
}
 80004de:	4618      	mov	r0, r3
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <S25FL128S_WriteEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t S25FL128S_WriteEnable(QSPI_HandleTypeDef *Ctx, S25FL128S_Interface_t Mode)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b096      	sub	sp, #88	; 0x58
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
 80004f2:	460b      	mov	r3, r1
 80004f4:	70fb      	strb	r3, [r7, #3]
  QSPI_AutoPollingTypeDef s_config;

  UNUSED(Mode); /* The command Write Enable is always 1-0-0 */

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80004f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.Instruction       = S25FL128S_WRITE_ENABLE_CMD;
 80004fc:	2306      	movs	r3, #6
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000500:	2300      	movs	r3, #0
 8000502:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000504:	2300      	movs	r3, #0
 8000506:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DataMode          = QSPI_DATA_NONE;
 8000508:	2300      	movs	r3, #0
 800050a:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DummyCycles       = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000510:	2300      	movs	r3, #0
 8000512:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000514:	2300      	movs	r3, #0
 8000516:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800051c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000520:	4619      	mov	r1, r3
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f000 fd9e 	bl	8001064 <HAL_QSPI_Command>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d002      	beq.n	8000534 <S25FL128S_WriteEnable+0x4a>
  {
    return S25FL128S_ERROR;
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
 8000532:	e021      	b.n	8000578 <S25FL128S_WriteEnable+0x8e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = S25FL128S_SR1_WREN;
 8000534:	2302      	movs	r3, #2
 8000536:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = S25FL128S_SR1_WREN;
 8000538:	2302      	movs	r3, #2
 800053a:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800053c:	2300      	movs	r3, #0
 800053e:	61fb      	str	r3, [r7, #28]
  s_config.StatusBytesSize = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 8000544:	2310      	movs	r3, #16
 8000546:	617b      	str	r3, [r7, #20]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000548:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800054c:	623b      	str	r3, [r7, #32]
  s_command.Instruction    = S25FL128S_READ_STATUS_REG1_CMD;
 800054e:	2305      	movs	r3, #5
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8000552:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000556:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000558:	f107 020c 	add.w	r2, r7, #12
 800055c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000560:	f241 3388 	movw	r3, #5000	; 0x1388
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f000 fe6d 	bl	8001244 <HAL_QSPI_AutoPolling>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d002      	beq.n	8000576 <S25FL128S_WriteEnable+0x8c>
  {
    return S25FL128S_ERROR;
 8000570:	f04f 33ff 	mov.w	r3, #4294967295
 8000574:	e000      	b.n	8000578 <S25FL128S_WriteEnable+0x8e>
  }

  return S25FL128S_OK;
 8000576:	2300      	movs	r3, #0
}
 8000578:	4618      	mov	r0, r3
 800057a:	3758      	adds	r7, #88	; 0x58
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <S25FL128S_WriteDisable>:
  * @param  Ctx QSPI handle
  * @param  Mode Flash mode
  * @retval QSPI memory status
  */
int32_t S25FL128S_WriteDisable(QSPI_HandleTypeDef *Ctx, S25FL128S_Interface_t Mode)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b090      	sub	sp, #64	; 0x40
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;

  UNUSED(Mode); /* The command Write Disable is always 1-0-0 */

  /* Initialize the read ID command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800058c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = S25FL128S_WRITE_DISABLE_CMD;
 8000592:	2304      	movs	r3, #4
 8000594:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000596:	2300      	movs	r3, #0
 8000598:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800059a:	2300      	movs	r3, #0
 800059c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	623b      	str	r3, [r7, #32]
  s_command.DataMode          = QSPI_DATA_NONE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80005aa:	2300      	movs	r3, #0
 80005ac:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80005b6:	4619      	mov	r1, r3
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f000 fd53 	bl	8001064 <HAL_QSPI_Command>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <S25FL128S_WriteDisable+0x4a>
  {
    return S25FL128S_ERROR;
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
 80005c8:	e000      	b.n	80005cc <S25FL128S_WriteDisable+0x4c>
  }

  return S25FL128S_OK;
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3740      	adds	r7, #64	; 0x40
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <S25FL128S_PageProgram>:
  * @param  WriteAddr Write start address
  * @param  Size Size of data to write. Range 1 ~ 256
  * @retval QSPI memory status
  */
int32_t S25FL128S_PageProgram(QSPI_HandleTypeDef *Ctx, S25FL128S_Interface_t Mode, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b092      	sub	sp, #72	; 0x48
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	607a      	str	r2, [r7, #4]
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	460b      	mov	r3, r1
 80005e2:	72fb      	strb	r3, [r7, #11]
  QSPI_CommandTypeDef s_command;

  /* Setup program command */
  switch(Mode)
 80005e4:	7afb      	ldrb	r3, [r7, #11]
 80005e6:	2b03      	cmp	r3, #3
 80005e8:	d10b      	bne.n	8000602 <S25FL128S_PageProgram+0x2e>
  {
  case S25FL128S_SPI_1I4O_MODE :              /* 1-1-4 program commands */
    s_command.Instruction     = S25FL128S_QUAD_IN_FAST_PROG_4_BYTE_ADDR_CMD;
 80005ea:	2334      	movs	r3, #52	; 0x34
 80005ec:	617b      	str	r3, [r7, #20]
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80005ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 80005f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f8:	633b      	str	r3, [r7, #48]	; 0x30
    s_command.DataMode        = QSPI_DATA_4_LINES;
 80005fa:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80005fe:	63bb      	str	r3, [r7, #56]	; 0x38
    break;
 8000600:	e00b      	b.n	800061a <S25FL128S_PageProgram+0x46>

  case S25FL128S_SPI_MODE :                   /* 1-1-1 commands, Power on H/W default setting */
  default :
    s_command.Instruction     = S25FL128S_PAGE_PROG_4_BYTE_ADDR_CMD;
 8000602:	2312      	movs	r3, #18
 8000604:	617b      	str	r3, [r7, #20]
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 800060c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000610:	633b      	str	r3, [r7, #48]	; 0x30
    s_command.DataMode        = QSPI_DATA_1_LINE;
 8000612:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000616:	63bb      	str	r3, [r7, #56]	; 0x38
    break;
 8000618:	bf00      	nop
  }

  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800061a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800061e:	623b      	str	r3, [r7, #32]
  s_command.Address           = WriteAddr;
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	61bb      	str	r3, [r7, #24]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000624:	2300      	movs	r3, #0
 8000626:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.NbData            = Size;
 800062c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000634:	2300      	movs	r3, #0
 8000636:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000640:	4619      	mov	r1, r3
 8000642:	68f8      	ldr	r0, [r7, #12]
 8000644:	f000 fd0e 	bl	8001064 <HAL_QSPI_Command>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d002      	beq.n	8000654 <S25FL128S_PageProgram+0x80>
  {
    return S25FL128S_ERROR;
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	e00c      	b.n	800066e <S25FL128S_PageProgram+0x9a>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(Ctx, pData, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000654:	f241 3288 	movw	r2, #5000	; 0x1388
 8000658:	6879      	ldr	r1, [r7, #4]
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f000 fd60 	bl	8001120 <HAL_QSPI_Transmit>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d002      	beq.n	800066c <S25FL128S_PageProgram+0x98>
  {
    return S25FL128S_ERROR;
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	e000      	b.n	800066e <S25FL128S_PageProgram+0x9a>
  }

  return S25FL128S_OK;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	3748      	adds	r7, #72	; 0x48
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <S25FL128S_ChipErase>:
  * @param  Ctx QSPI handle
  * @param  Mode Flash mode
  * @retval QSPI memory status
  */
int32_t S25FL128S_ChipErase(QSPI_HandleTypeDef *Ctx, S25FL128S_Interface_t Mode)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b090      	sub	sp, #64	; 0x40
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	460b      	mov	r3, r1
 8000680:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  UNUSED(Mode); /* The command Chip Erase is always 1-0-0 */

  /* Initialize the erase command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000688:	2300      	movs	r3, #0
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = S25FL128S_BULK_ERASE_ALTERNATE_CMD;
 800068c:	23c7      	movs	r3, #199	; 0xc7
 800068e:	60fb      	str	r3, [r7, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000690:	2300      	movs	r3, #0
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	623b      	str	r3, [r7, #32]
  s_command.DataMode          = QSPI_DATA_NONE;
 8000698:	2300      	movs	r3, #0
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800069c:	2300      	movs	r3, #0
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80006ac:	4619      	mov	r1, r3
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f000 fcd8 	bl	8001064 <HAL_QSPI_Command>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d002      	beq.n	80006c0 <S25FL128S_ChipErase+0x4a>
  {
    return S25FL128S_ERROR;
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	e000      	b.n	80006c2 <S25FL128S_ChipErase+0x4c>
  }

  return S25FL128S_OK;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3740      	adds	r7, #64	; 0x40
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <S25FL128S_EnableMemoryMappedModeSTR>:
  * @param  Ctx QSPI handle
  * @param  Mode Flash mode
  * @retval QSPI memory status
  */
int32_t S25FL128S_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, S25FL128S_Interface_t Mode)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b092      	sub	sp, #72	; 0x48
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  switch(Mode)
 80006d8:	78fb      	ldrb	r3, [r7, #3]
 80006da:	3b01      	subs	r3, #1
 80006dc:	2b03      	cmp	r3, #3
 80006de:	d843      	bhi.n	8000768 <S25FL128S_EnableMemoryMappedModeSTR+0x9c>
 80006e0:	a201      	add	r2, pc, #4	; (adr r2, 80006e8 <S25FL128S_EnableMemoryMappedModeSTR+0x1c>)
 80006e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e6:	bf00      	nop
 80006e8:	080006f9 	.word	0x080006f9
 80006ec:	08000715 	.word	0x08000715
 80006f0:	08000731 	.word	0x08000731
 80006f4:	0800074d 	.word	0x0800074d
  {
  case S25FL128S_SPI_1I2O_MODE :           /* 1-1-2 read commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80006f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.Instruction     = S25FL128S_DUAL_OUT_FAST_READ_4_BYTE_ADDR_CMD;
 80006fe:	233c      	movs	r3, #60	; 0x3c
 8000700:	617b      	str	r3, [r7, #20]
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 8000702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000706:	633b      	str	r3, [r7, #48]	; 0x30
    s_command.DataMode        = QSPI_DATA_2_LINES;
 8000708:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800070c:	63bb      	str	r3, [r7, #56]	; 0x38
    s_command.DummyCycles     = S25FL128S_DUMMY_CYCLES_READ;
 800070e:	2308      	movs	r3, #8
 8000710:	62bb      	str	r3, [r7, #40]	; 0x28
    break;
 8000712:	e037      	b.n	8000784 <S25FL128S_EnableMemoryMappedModeSTR+0xb8>

  case S25FL128S_SPI_2IO_MODE :           /* 1-2-2 read commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.Instruction     = S25FL128S_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800071a:	23bc      	movs	r3, #188	; 0xbc
 800071c:	617b      	str	r3, [r7, #20]
    s_command.AddressMode     = QSPI_ADDRESS_2_LINES;
 800071e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000722:	633b      	str	r3, [r7, #48]	; 0x30
    s_command.DataMode        = QSPI_DATA_2_LINES;
 8000724:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000728:	63bb      	str	r3, [r7, #56]	; 0x38
    s_command.DummyCycles     = S25FL128S_DUMMY_CYCLES_READ_DUAL_INOUT;
 800072a:	2304      	movs	r3, #4
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
    break;
 800072e:	e029      	b.n	8000784 <S25FL128S_EnableMemoryMappedModeSTR+0xb8>

  case S25FL128S_SPI_1I4O_MODE :           /* 1-1-4 read commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000734:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.Instruction     = S25FL128S_QUAD_OUT_FAST_READ_4_BYTE_ADDR_CMD;
 8000736:	236c      	movs	r3, #108	; 0x6c
 8000738:	617b      	str	r3, [r7, #20]
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 800073a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073e:	633b      	str	r3, [r7, #48]	; 0x30
    s_command.DataMode        = QSPI_DATA_4_LINES;
 8000740:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000744:	63bb      	str	r3, [r7, #56]	; 0x38
    s_command.DummyCycles     = S25FL128S_DUMMY_CYCLES_READ;
 8000746:	2308      	movs	r3, #8
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
    break;
 800074a:	e01b      	b.n	8000784 <S25FL128S_EnableMemoryMappedModeSTR+0xb8>

  case S25FL128S_SPI_4IO_MODE :           /* 1-4-4 read commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800074c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000750:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.Instruction     = S25FL128S_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8000752:	23ec      	movs	r3, #236	; 0xec
 8000754:	617b      	str	r3, [r7, #20]
    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 8000756:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
    s_command.DataMode        = QSPI_DATA_4_LINES;
 800075c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000760:	63bb      	str	r3, [r7, #56]	; 0x38
    s_command.DummyCycles     = S25FL128S_DUMMY_CYCLES_READ_QUAD_INOUT;
 8000762:	2306      	movs	r3, #6
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
    break;
 8000766:	e00d      	b.n	8000784 <S25FL128S_EnableMemoryMappedModeSTR+0xb8>

  case S25FL128S_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
  default:
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.Instruction     = S25FL128S_FAST_READ_4_BYTE_ADDR_CMD;
 800076e:	230c      	movs	r3, #12
 8000770:	617b      	str	r3, [r7, #20]
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 8000772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000776:	633b      	str	r3, [r7, #48]	; 0x30
    s_command.DataMode        = QSPI_DATA_1_LINE;
 8000778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800077c:	63bb      	str	r3, [r7, #56]	; 0x38
    s_command.DummyCycles     = S25FL128S_DUMMY_CYCLES_READ;
 800077e:	2308      	movs	r3, #8
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
    break;
 8000782:	bf00      	nop
  }

  s_command.DummyCycles        = S25FL128S_DUMMY_CYCLES_READ;
 8000784:	2308      	movs	r3, #8
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode  = QSPI_ALTERNATE_BYTES_NONE;
 8000788:	2300      	movs	r3, #0
 800078a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 800078c:	2300      	movs	r3, #0
 800078e:	647b      	str	r3, [r7, #68]	; 0x44
  /* Configure the command for the read instruction */
  s_command.AddressSize        = QSPI_ADDRESS_32_BITS;
 8000790:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000794:	623b      	str	r3, [r7, #32]
  s_command.DdrMode            = QSPI_DDR_MODE_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	643b      	str	r3, [r7, #64]	; 0x40
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
  s_mem_mapped_cfg.TimeOutPeriod     = 0x00;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80007a2:	f107 020c 	add.w	r2, r7, #12
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f000 fdc0 	bl	8001332 <HAL_QSPI_MemoryMapped>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d002      	beq.n	80007be <S25FL128S_EnableMemoryMappedModeSTR+0xf2>
  {
    return S25FL128S_ERROR;
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
 80007bc:	e000      	b.n	80007c0 <S25FL128S_EnableMemoryMappedModeSTR+0xf4>
  }

  return S25FL128S_OK;
 80007be:	2300      	movs	r3, #0
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3748      	adds	r7, #72	; 0x48
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007da:	e7fe      	b.n	80007da <NMI_Handler+0x4>

080007dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <HardFault_Handler+0x4>

080007e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <MemManage_Handler+0x4>

080007e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <BusFault_Handler+0x4>

080007ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <UsageFault_Handler+0x4>

080007f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000822:	f000 f8e7 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000830:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <SystemInit+0x98>)
 8000832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000836:	4a23      	ldr	r2, [pc, #140]	; (80008c4 <SystemInit+0x98>)
 8000838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800083c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000854:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000858:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800085a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <SystemInit+0x9c>)
 8000866:	4013      	ands	r3, r2
 8000868:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800086a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800086e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000876:	f023 0305 	bic.w	r3, r3, #5
 800087a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800087e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000882:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000886:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800088a:	f023 0301 	bic.w	r3, r3, #1
 800088e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000896:	4a0d      	ldr	r2, [pc, #52]	; (80008cc <SystemInit+0xa0>)
 8000898:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800089a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <SystemInit+0xa0>)
 80008a0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80008b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	e000ed00 	.word	0xe000ed00
 80008c8:	faf6fefb 	.word	0xfaf6fefb
 80008cc:	22041000 	.word	0x22041000

080008d0 <CopyDataInit>:
 80008d0:	58d4      	ldr	r4, [r2, r3]
 80008d2:	50c4      	str	r4, [r0, r3]
 80008d4:	3304      	adds	r3, #4

080008d6 <LoopCopyDataInit>:
 80008d6:	18c4      	adds	r4, r0, r3
 80008d8:	428c      	cmp	r4, r1
 80008da:	d3f9      	bcc.n	80008d0 <CopyDataInit>
 80008dc:	4770      	bx	lr

080008de <FillZerobss>:
 80008de:	6003      	str	r3, [r0, #0]
 80008e0:	3004      	adds	r0, #4

080008e2 <LoopFillZerobss>:
 80008e2:	4288      	cmp	r0, r1
 80008e4:	d3fb      	bcc.n	80008de <FillZerobss>
 80008e6:	4770      	bx	lr

080008e8 <Reset_Handler>:
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <LoopForever+0x4>)
 80008ea:	4685      	mov	sp, r0
 80008ec:	f7ff ff9e 	bl	800082c <SystemInit>
 80008f0:	480b      	ldr	r0, [pc, #44]	; (8000920 <LoopForever+0x8>)
 80008f2:	490c      	ldr	r1, [pc, #48]	; (8000924 <LoopForever+0xc>)
 80008f4:	4a0c      	ldr	r2, [pc, #48]	; (8000928 <LoopForever+0x10>)
 80008f6:	2300      	movs	r3, #0
 80008f8:	f7ff ffed 	bl	80008d6 <LoopCopyDataInit>
 80008fc:	480b      	ldr	r0, [pc, #44]	; (800092c <LoopForever+0x14>)
 80008fe:	490c      	ldr	r1, [pc, #48]	; (8000930 <LoopForever+0x18>)
 8000900:	2300      	movs	r3, #0
 8000902:	f7ff ffee 	bl	80008e2 <LoopFillZerobss>
 8000906:	480b      	ldr	r0, [pc, #44]	; (8000934 <LoopForever+0x1c>)
 8000908:	490b      	ldr	r1, [pc, #44]	; (8000938 <LoopForever+0x20>)
 800090a:	2300      	movs	r3, #0
 800090c:	f7ff ffe9 	bl	80008e2 <LoopFillZerobss>
 8000910:	f002 fc8e 	bl	8003230 <__libc_init_array>
 8000914:	f7ff fc58 	bl	80001c8 <main>

08000918 <LoopForever>:
 8000918:	e7fe      	b.n	8000918 <LoopForever>
 800091a:	0000      	.short	0x0000
 800091c:	20030000 	.word	0x20030000
 8000920:	20000004 	.word	0x20000004
 8000924:	20000014 	.word	0x20000014
 8000928:	08003354 	.word	0x08003354
 800092c:	20000014 	.word	0x20000014
 8000930:	20000090 	.word	0x20000090
 8000934:	20030000 	.word	0x20030000
 8000938:	20030000 	.word	0x20030000

0800093c <ADC1_IRQHandler>:
 800093c:	e7fe      	b.n	800093c <ADC1_IRQHandler>
	...

08000940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000946:	2300      	movs	r3, #0
 8000948:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <HAL_Init+0x3c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <HAL_Init+0x3c>)
 8000950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000954:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000956:	2003      	movs	r0, #3
 8000958:	f000 f94e 	bl	8000bf8 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800095c:	200f      	movs	r0, #15
 800095e:	f000 f80f 	bl	8000980 <HAL_InitTick>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d002      	beq.n	800096e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000968:	2301      	movs	r3, #1
 800096a:	71fb      	strb	r3, [r7, #7]
 800096c:	e001      	b.n	8000972 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800096e:	f7ff ff2b 	bl	80007c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000972:	79fb      	ldrb	r3, [r7, #7]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	58004000 	.word	0x58004000

08000980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000988:	2300      	movs	r3, #0
 800098a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <HAL_InitTick+0x6c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d024      	beq.n	80009de <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000994:	f001 ff60 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 8000998:	4602      	mov	r2, r0
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <HAL_InitTick+0x6c>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4619      	mov	r1, r3
 80009a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f948 	bl	8000c42 <HAL_SYSTICK_Config>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d10f      	bne.n	80009d8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b0f      	cmp	r3, #15
 80009bc:	d809      	bhi.n	80009d2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009be:	2200      	movs	r2, #0
 80009c0:	6879      	ldr	r1, [r7, #4]
 80009c2:	f04f 30ff 	mov.w	r0, #4294967295
 80009c6:	f000 f922 	bl	8000c0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ca:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <HAL_InitTick+0x70>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	e007      	b.n	80009e2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	73fb      	strb	r3, [r7, #15]
 80009d6:	e004      	b.n	80009e2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	73fb      	strb	r3, [r7, #15]
 80009dc:	e001      	b.n	80009e2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000010 	.word	0x20000010
 80009f0:	2000000c 	.word	0x2000000c

080009f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_IncTick+0x20>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_IncTick+0x24>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <HAL_IncTick+0x24>)
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000010 	.word	0x20000010
 8000a18:	2000008c 	.word	0x2000008c

08000a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_GetTick+0x14>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	2000008c 	.word	0x2000008c

08000a34 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <HAL_GetTickPrio+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	2000000c 	.word	0x2000000c

08000a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000a54:	f7ff ffe2 	bl	8000a1c <HAL_GetTick>
 8000a58:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a64:	d005      	beq.n	8000a72 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_Delay+0x44>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4413      	add	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000a72:	bf00      	nop
 8000a74:	f7ff ffd2 	bl	8000a1c <HAL_GetTick>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d8f7      	bhi.n	8000a74 <HAL_Delay+0x28>
    {
    }
  }
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000010 	.word	0x20000010

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db0a      	blt.n	8000b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	490c      	ldr	r1, [pc, #48]	; (8000b44 <__NVIC_SetPriority+0x4c>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	0112      	lsls	r2, r2, #4
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b20:	e00a      	b.n	8000b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <__NVIC_SetPriority+0x50>)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	0112      	lsls	r2, r2, #4
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	440b      	add	r3, r1
 8000b36:	761a      	strb	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f1c3 0307 	rsb	r3, r3, #7
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	bf28      	it	cs
 8000b6a:	2304      	movcs	r3, #4
 8000b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3304      	adds	r3, #4
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	d902      	bls.n	8000b7c <NVIC_EncodePriority+0x30>
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3b03      	subs	r3, #3
 8000b7a:	e000      	b.n	8000b7e <NVIC_EncodePriority+0x32>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	43d9      	mvns	r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	4313      	orrs	r3, r2
         );
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3724      	adds	r7, #36	; 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc4:	d301      	bcc.n	8000bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00f      	b.n	8000bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <SysTick_Config+0x40>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd2:	210f      	movs	r1, #15
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f7ff ff8e 	bl	8000af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <SysTick_Config+0x40>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <SysTick_Config+0x40>)
 8000be4:	2207      	movs	r2, #7
 8000be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	e000e010 	.word	0xe000e010

08000bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ff47 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1c:	f7ff ff5e 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000c20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	6978      	ldr	r0, [r7, #20]
 8000c28:	f7ff ff90 	bl	8000b4c <NVIC_EncodePriority>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff5f 	bl	8000af8 <__NVIC_SetPriority>
}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffb2 	bl	8000bb4 <SysTick_Config>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6a:	e14c      	b.n	8000f06 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	2101      	movs	r1, #1
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f000 813e 	beq.w	8000f00 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d005      	beq.n	8000c9c <HAL_GPIO_Init+0x40>
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d130      	bne.n	8000cfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	091b      	lsrs	r3, r3, #4
 8000ce8:	f003 0201 	and.w	r2, r3, #1
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	d017      	beq.n	8000d3a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d123      	bne.n	8000d8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	08da      	lsrs	r2, r3, #3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3208      	adds	r2, #8
 8000d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	691a      	ldr	r2, [r3, #16]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	08da      	lsrs	r2, r3, #3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3208      	adds	r2, #8
 8000d88:	6939      	ldr	r1, [r7, #16]
 8000d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	2203      	movs	r2, #3
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0203 	and.w	r2, r3, #3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 8098 	beq.w	8000f00 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000dd0:	4a54      	ldr	r2, [pc, #336]	; (8000f24 <HAL_GPIO_Init+0x2c8>)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	089b      	lsrs	r3, r3, #2
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	220f      	movs	r2, #15
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dfa:	d019      	beq.n	8000e30 <HAL_GPIO_Init+0x1d4>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a4a      	ldr	r2, [pc, #296]	; (8000f28 <HAL_GPIO_Init+0x2cc>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d013      	beq.n	8000e2c <HAL_GPIO_Init+0x1d0>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a49      	ldr	r2, [pc, #292]	; (8000f2c <HAL_GPIO_Init+0x2d0>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d00d      	beq.n	8000e28 <HAL_GPIO_Init+0x1cc>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a48      	ldr	r2, [pc, #288]	; (8000f30 <HAL_GPIO_Init+0x2d4>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d007      	beq.n	8000e24 <HAL_GPIO_Init+0x1c8>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a47      	ldr	r2, [pc, #284]	; (8000f34 <HAL_GPIO_Init+0x2d8>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d101      	bne.n	8000e20 <HAL_GPIO_Init+0x1c4>
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	e008      	b.n	8000e32 <HAL_GPIO_Init+0x1d6>
 8000e20:	2307      	movs	r3, #7
 8000e22:	e006      	b.n	8000e32 <HAL_GPIO_Init+0x1d6>
 8000e24:	2303      	movs	r3, #3
 8000e26:	e004      	b.n	8000e32 <HAL_GPIO_Init+0x1d6>
 8000e28:	2302      	movs	r3, #2
 8000e2a:	e002      	b.n	8000e32 <HAL_GPIO_Init+0x1d6>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e000      	b.n	8000e32 <HAL_GPIO_Init+0x1d6>
 8000e30:	2300      	movs	r3, #0
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	f002 0203 	and.w	r2, r2, #3
 8000e38:	0092      	lsls	r2, r2, #2
 8000e3a:	4093      	lsls	r3, r2
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e42:	4938      	ldr	r1, [pc, #224]	; (8000f24 <HAL_GPIO_Init+0x2c8>)
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	3302      	adds	r3, #2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e50:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <HAL_GPIO_Init+0x2dc>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e74:	4a30      	ldr	r2, [pc, #192]	; (8000f38 <HAL_GPIO_Init+0x2dc>)
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <HAL_GPIO_Init+0x2dc>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e9e:	4a26      	ldr	r2, [pc, #152]	; (8000f38 <HAL_GPIO_Init+0x2dc>)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ea4:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <HAL_GPIO_Init+0x2dc>)
 8000ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000eca:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <HAL_GPIO_Init+0x2dc>)
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_GPIO_Init+0x2dc>)
 8000ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ef8:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <HAL_GPIO_Init+0x2dc>)
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3301      	adds	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f47f aeab 	bne.w	8000c6c <HAL_GPIO_Init+0x10>
  }
}
 8000f16:	bf00      	nop
 8000f18:	bf00      	nop
 8000f1a:	371c      	adds	r7, #28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	40010000 	.word	0x40010000
 8000f28:	48000400 	.word	0x48000400
 8000f2c:	48000800 	.word	0x48000800
 8000f30:	48000c00 	.word	0x48000c00
 8000f34:	48001000 	.word	0x48001000
 8000f38:	58000800 	.word	0x58000800

08000f3c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	58000400 	.word	0x58000400

08000f5c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	58000400 	.word	0x58000400

08000f78 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff fd4c 	bl	8000a1c <HAL_GetTick>
 8000f84:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e063      	b.n	8001058 <HAL_QSPI_Init+0xe0>
  assert_param(IS_QSPI_SSHIFT(hqspi->Init.SampleShifting));
  assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
  assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
  assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d10b      	bne.n	8000fb4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff fa27 	bl	80003f8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8000faa:	f241 3188 	movw	r1, #5000	; 0x1388
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 fa21 	bl	80013f6 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	021a      	lsls	r2, r3, #8
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2120      	movs	r1, #32
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 fa19 	bl	8001412 <QSPI_WaitFlagStateUntilTimeout>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8000fe4:	7afb      	ldrb	r3, [r7, #11]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d131      	bne.n	800104e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000ff4:	f023 0310 	bic.w	r3, r3, #16
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	6852      	ldr	r2, [r2, #4]
 8000ffc:	0611      	lsls	r1, r2, #24
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68d2      	ldr	r2, [r2, #12]
 8001002:	4311      	orrs	r1, r2
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6812      	ldr	r2, [r2, #0]
 8001008:	430b      	orrs	r3, r1
 800100a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <HAL_QSPI_Init+0xe8>)
 8001014:	4013      	ands	r3, r2
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	6912      	ldr	r2, [r2, #16]
 800101a:	0411      	lsls	r1, r2, #16
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6952      	ldr	r2, [r2, #20]
 8001020:	4311      	orrs	r1, r2
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	6992      	ldr	r2, [r2, #24]
 8001026:	4311      	orrs	r1, r2
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	430b      	orrs	r3, r1
 800102e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f042 0201 	orr.w	r2, r2, #1
 800103e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2201      	movs	r2, #1
 800104a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8001056:	7afb      	ldrb	r3, [r7, #11]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	ffe0f8fe 	.word	0xffe0f8fe

08001064 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af02      	add	r7, sp, #8
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff fcd4 	bl	8000a1c <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d101      	bne.n	8001086 <HAL_QSPI_Command+0x22>
 8001082:	2302      	movs	r3, #2
 8001084:	e048      	b.n	8001118 <HAL_QSPI_Command+0xb4>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b01      	cmp	r3, #1
 8001098:	d137      	bne.n	800110a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2200      	movs	r2, #0
 800109e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2202      	movs	r2, #2
 80010a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	2200      	movs	r2, #0
 80010b0:	2120      	movs	r1, #32
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 f9ad 	bl	8001412 <QSPI_WaitFlagStateUntilTimeout>
 80010b8:	4603      	mov	r3, r0
 80010ba:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d125      	bne.n	800110e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80010c2:	2200      	movs	r2, #0
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f000 f9da 	bl	8001480 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d115      	bne.n	8001100 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	2201      	movs	r2, #1
 80010dc:	2102      	movs	r1, #2
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f000 f997 	bl	8001412 <QSPI_WaitFlagStateUntilTimeout>
 80010e4:	4603      	mov	r3, r0
 80010e6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10f      	bne.n	800110e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2202      	movs	r2, #2
 80010f4:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80010fe:	e006      	b.n	800110e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001108:	e001      	b.n	800110e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800110a:	2302      	movs	r3, #2
 800110c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8001116:	7dfb      	ldrb	r3, [r7, #23]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af02      	add	r7, sp, #8
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff fc74 	bl	8000a1c <HAL_GetTick>
 8001134:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3320      	adds	r3, #32
 800113c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b01      	cmp	r3, #1
 8001148:	d101      	bne.n	800114e <HAL_QSPI_Transmit+0x2e>
 800114a:	2302      	movs	r3, #2
 800114c:	e076      	b.n	800123c <HAL_QSPI_Transmit+0x11c>
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b01      	cmp	r3, #1
 8001160:	d165      	bne.n	800122e <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2200      	movs	r2, #0
 8001166:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d056      	beq.n	800121c <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2212      	movs	r2, #18
 8001172:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	1c5a      	adds	r2, r3, #1
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	695a      	ldr	r2, [r3, #20]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80011a2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80011a4:	e01b      	b.n	80011de <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	2201      	movs	r2, #1
 80011ae:	2104      	movs	r1, #4
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	f000 f92e 	bl	8001412 <QSPI_WaitFlagStateUntilTimeout>
 80011b6:	4603      	mov	r3, r0
 80011b8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80011ba:	7ffb      	ldrb	r3, [r7, #31]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d113      	bne.n	80011e8 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	781a      	ldrb	r2, [r3, #0]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	1e5a      	subs	r2, r3, #1
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1df      	bne.n	80011a6 <HAL_QSPI_Transmit+0x86>
 80011e6:	e000      	b.n	80011ea <HAL_QSPI_Transmit+0xca>
          break;
 80011e8:	bf00      	nop
      }

      if (status == HAL_OK)
 80011ea:	7ffb      	ldrb	r3, [r7, #31]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d110      	bne.n	8001212 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	2201      	movs	r2, #1
 80011f8:	2102      	movs	r1, #2
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f000 f909 	bl	8001412 <QSPI_WaitFlagStateUntilTimeout>
 8001200:	4603      	mov	r3, r0
 8001202:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8001204:	7ffb      	ldrb	r3, [r7, #31]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d103      	bne.n	8001212 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2202      	movs	r2, #2
 8001210:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2201      	movs	r2, #1
 8001216:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800121a:	e00a      	b.n	8001232 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001220:	f043 0208 	orr.w	r2, r3, #8
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	77fb      	strb	r3, [r7, #31]
 800122c:	e001      	b.n	8001232 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800122e:	2302      	movs	r3, #2
 8001230:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800123a:	7ffb      	ldrb	r3, [r7, #31]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af02      	add	r7, sp, #8
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001252:	f7ff fbe3 	bl	8000a1c <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b01      	cmp	r3, #1
 8001262:	d101      	bne.n	8001268 <HAL_QSPI_AutoPolling+0x24>
 8001264:	2302      	movs	r3, #2
 8001266:	e060      	b.n	800132a <HAL_QSPI_AutoPolling+0xe6>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b01      	cmp	r3, #1
 800127a:	d14f      	bne.n	800131c <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2200      	movs	r2, #0
 8001280:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2242      	movs	r2, #66	; 0x42
 8001286:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	2200      	movs	r2, #0
 8001292:	2120      	movs	r1, #32
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f000 f8bc 	bl	8001412 <QSPI_WaitFlagStateUntilTimeout>
 800129a:	4603      	mov	r3, r0
 800129c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800129e:	7dfb      	ldrb	r3, [r7, #23]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d13d      	bne.n	8001320 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6852      	ldr	r2, [r2, #4]
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	6892      	ldr	r2, [r2, #8]
 80012c0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	431a      	orrs	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80012da:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80012e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 f8c8 	bl	8001480 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	2201      	movs	r2, #1
 80012f8:	2108      	movs	r1, #8
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f000 f889 	bl	8001412 <QSPI_WaitFlagStateUntilTimeout>
 8001300:	4603      	mov	r3, r0
 8001302:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8001304:	7dfb      	ldrb	r3, [r7, #23]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10a      	bne.n	8001320 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2208      	movs	r2, #8
 8001310:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800131a:	e001      	b.n	8001320 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800131c:	2302      	movs	r3, #2
 800131e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8001328:	7dfb      	ldrb	r3, [r7, #23]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b088      	sub	sp, #32
 8001336:	af02      	add	r7, sp, #8
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800133e:	f7ff fb6d 	bl	8000a1c <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_QSPI_MemoryMapped+0x22>
 8001350:	2302      	movs	r3, #2
 8001352:	e04c      	b.n	80013ee <HAL_QSPI_MemoryMapped+0xbc>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b01      	cmp	r3, #1
 8001366:	d13b      	bne.n	80013e0 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2282      	movs	r2, #130	; 0x82
 8001372:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	2200      	movs	r2, #0
 8001380:	2120      	movs	r1, #32
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f000 f845 	bl	8001412 <QSPI_WaitFlagStateUntilTimeout>
 8001388:	4603      	mov	r3, r0
 800138a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800138c:	7dfb      	ldrb	r3, [r7, #23]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d128      	bne.n	80013e4 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f023 0108 	bic.w	r1, r3, #8
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d110      	bne.n	80013d2 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2210      	movs	r2, #16
 80013c0:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80013d0:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80013d2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80013d6:	68b9      	ldr	r1, [r7, #8]
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f000 f851 	bl	8001480 <QSPI_Config>
 80013de:	e001      	b.n	80013e4 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 80013e0:	2302      	movs	r3, #2
 80013e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	4613      	mov	r3, r2
 8001420:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001422:	e01a      	b.n	800145a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800142a:	d016      	beq.n	800145a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800142c:	f7ff faf6 	bl	8000a1c <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	429a      	cmp	r2, r3
 800143a:	d302      	bcc.n	8001442 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10b      	bne.n	800145a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2204      	movs	r2, #4
 8001446:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144e:	f043 0201 	orr.w	r2, r3, #1
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e00e      	b.n	8001478 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	4013      	ands	r3, r2
 8001464:	2b00      	cmp	r3, #0
 8001466:	bf14      	ite	ne
 8001468:	2301      	movne	r3, #1
 800146a:	2300      	moveq	r3, #0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	429a      	cmp	r2, r3
 8001474:	d1d6      	bne.n	8001424 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	2b00      	cmp	r3, #0
 8001492:	d009      	beq.n	80014a8 <QSPI_Config+0x28>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800149a:	d005      	beq.n	80014a8 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3a01      	subs	r2, #1
 80014a6:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 80ad 	beq.w	800160c <QSPI_Config+0x18c>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d059      	beq.n	800156e <QSPI_Config+0xee>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	6892      	ldr	r2, [r2, #8]
 80014c2:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d02e      	beq.n	800152a <QSPI_Config+0xaa>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	431a      	orrs	r2, r3
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	431a      	orrs	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	049b      	lsls	r3, r3, #18
 80014e2:	431a      	orrs	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	431a      	orrs	r2, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	431a      	orrs	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	431a      	orrs	r2, r3
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	431a      	orrs	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	431a      	orrs	r2, r3
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	ea42 0103 	orr.w	r1, r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	430a      	orrs	r2, r1
 8001512:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800151a:	f000 8119 	beq.w	8001750 <QSPI_Config+0x2d0>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	6852      	ldr	r2, [r2, #4]
 8001526:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8001528:	e112      	b.n	8001750 <QSPI_Config+0x2d0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	431a      	orrs	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	431a      	orrs	r2, r3
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	049b      	lsls	r3, r3, #18
 8001540:	431a      	orrs	r2, r3
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	431a      	orrs	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	431a      	orrs	r2, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	431a      	orrs	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	431a      	orrs	r2, r3
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	ea42 0103 	orr.w	r1, r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	430a      	orrs	r2, r1
 800156a:	615a      	str	r2, [r3, #20]
}
 800156c:	e0f0      	b.n	8001750 <QSPI_Config+0x2d0>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d02b      	beq.n	80015ce <QSPI_Config+0x14e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	431a      	orrs	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	431a      	orrs	r2, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	049b      	lsls	r3, r3, #18
 800158c:	431a      	orrs	r2, r3
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	431a      	orrs	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	431a      	orrs	r2, r3
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	431a      	orrs	r2, r3
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	431a      	orrs	r2, r3
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	ea42 0103 	orr.w	r1, r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80015be:	f000 80c7 	beq.w	8001750 <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	6852      	ldr	r2, [r2, #4]
 80015ca:	619a      	str	r2, [r3, #24]
}
 80015cc:	e0c0      	b.n	8001750 <QSPI_Config+0x2d0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	431a      	orrs	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	431a      	orrs	r2, r3
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	049b      	lsls	r3, r3, #18
 80015e4:	431a      	orrs	r2, r3
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	431a      	orrs	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	431a      	orrs	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	ea42 0103 	orr.w	r1, r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	430a      	orrs	r2, r1
 8001608:	615a      	str	r2, [r3, #20]
}
 800160a:	e0a1      	b.n	8001750 <QSPI_Config+0x2d0>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d052      	beq.n	80016ba <QSPI_Config+0x23a>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	6892      	ldr	r2, [r2, #8]
 800161c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d02a      	beq.n	800167c <QSPI_Config+0x1fc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	431a      	orrs	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	431a      	orrs	r2, r3
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	049b      	lsls	r3, r3, #18
 800163c:	431a      	orrs	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	431a      	orrs	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	431a      	orrs	r2, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	431a      	orrs	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	69db      	ldr	r3, [r3, #28]
 8001654:	431a      	orrs	r2, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	ea42 0103 	orr.w	r1, r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	430a      	orrs	r2, r1
 8001666:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800166e:	d06f      	beq.n	8001750 <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68ba      	ldr	r2, [r7, #8]
 8001676:	6852      	ldr	r2, [r2, #4]
 8001678:	619a      	str	r2, [r3, #24]
}
 800167a:	e069      	b.n	8001750 <QSPI_Config+0x2d0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	431a      	orrs	r2, r3
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	431a      	orrs	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	049b      	lsls	r3, r3, #18
 8001692:	431a      	orrs	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	431a      	orrs	r2, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	431a      	orrs	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	ea42 0103 	orr.w	r1, r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	615a      	str	r2, [r3, #20]
}
 80016b8:	e04a      	b.n	8001750 <QSPI_Config+0x2d0>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d027      	beq.n	8001712 <QSPI_Config+0x292>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	431a      	orrs	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	431a      	orrs	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	049b      	lsls	r3, r3, #18
 80016d8:	431a      	orrs	r2, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	431a      	orrs	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	431a      	orrs	r2, r3
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	431a      	orrs	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ea42 0103 	orr.w	r1, r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001704:	d024      	beq.n	8001750 <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	6852      	ldr	r2, [r2, #4]
 800170e:	619a      	str	r2, [r3, #24]
}
 8001710:	e01e      	b.n	8001750 <QSPI_Config+0x2d0>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	2b00      	cmp	r3, #0
 8001718:	d01a      	beq.n	8001750 <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	431a      	orrs	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	431a      	orrs	r2, r3
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	049b      	lsls	r3, r3, #18
 8001730:	431a      	orrs	r2, r3
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	431a      	orrs	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	431a      	orrs	r2, r3
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	ea42 0103 	orr.w	r1, r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	430a      	orrs	r2, r1
 800174e:	615a      	str	r2, [r3, #20]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800176a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800176e:	d101      	bne.n	8001774 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800178e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80017a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80017c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017ce:	d101      	bne.n	80017d4 <LL_RCC_HSE_IsReady+0x18>
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <LL_RCC_HSE_IsReady+0x1a>
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80017e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800180c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001810:	6013      	str	r3, [r2, #0]
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800182e:	d101      	bne.n	8001834 <LL_RCC_HSI_IsReady+0x18>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <LL_RCC_HSI_IsReady+0x1a>
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	061b      	lsls	r3, r3, #24
 8001856:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800186e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001872:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001876:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001894:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001898:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80018b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d101      	bne.n	80018c6 <LL_RCC_HSI48_IsReady+0x18>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <LL_RCC_HSI48_IsReady+0x1a>
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800191a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001922:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800193c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001944:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001948:	f023 0304 	bic.w	r3, r3, #4
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800195e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b02      	cmp	r3, #2
 800196c:	d101      	bne.n	8001972 <LL_RCC_LSE_IsReady+0x18>
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <LL_RCC_LSE_IsReady+0x1a>
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80019a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019b0:	f023 0301 	bic.w	r3, r3, #1
 80019b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80019c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d101      	bne.n	80019da <LL_RCC_LSI1_IsReady+0x18>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <LL_RCC_LSI1_IsReady+0x1a>
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80019ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a18:	f023 0304 	bic.w	r3, r3, #4
 8001a1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d101      	bne.n	8001a42 <LL_RCC_LSI2_IsReady+0x18>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <LL_RCC_LSI2_IsReady+0x1a>
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	6013      	str	r3, [r2, #0]
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d101      	bne.n	8001ace <LL_RCC_MSI_IsReady+0x16>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <LL_RCC_MSI_IsReady+0x18>
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b12:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2bb0      	cmp	r3, #176	; 0xb0
 8001b18:	d901      	bls.n	8001b1e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001b1a:	23b0      	movs	r3, #176	; 0xb0
 8001b1c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001b1e:	687b      	ldr	r3, [r7, #4]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b46:	4313      	orrs	r3, r2
 8001b48:	604b      	str	r3, [r1, #4]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f023 0203 	bic.w	r2, r3, #3
 8001b68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 030c 	and.w	r3, r3, #12
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bfa:	f023 020f 	bic.w	r2, r3, #15
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c06:	4313      	orrs	r3, r2
 8001c08:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	608b      	str	r3, [r1, #8]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	608b      	str	r3, [r1, #8]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ccc:	6013      	str	r3, [r2, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cea:	d101      	bne.n	8001cf0 <LL_RCC_PLL_IsReady+0x18>
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <LL_RCC_PLL_IsReady+0x1a>
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0303 	and.w	r3, r3, #3
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d70:	d101      	bne.n	8001d76 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d96:	d101      	bne.n	8001d9c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbc:	d101      	bne.n	8001dc2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001de0:	d101      	bne.n	8001de6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e04:	d101      	bne.n	8001e0a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b08d      	sub	sp, #52	; 0x34
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e363      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0320 	and.w	r3, r3, #32
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 808d 	beq.w	8001f52 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e38:	f7ff fea1 	bl	8001b7e <LL_RCC_GetSysClkSource>
 8001e3c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e3e:	f7ff ff82 	bl	8001d46 <LL_RCC_PLL_GetMainSource>
 8001e42:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_RCC_OscConfig+0x3e>
 8001e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4c:	2b0c      	cmp	r3, #12
 8001e4e:	d147      	bne.n	8001ee0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d144      	bne.n	8001ee0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e347      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001e66:	f7ff fe4c 	bl	8001b02 <LL_RCC_MSI_GetRange>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	429c      	cmp	r4, r3
 8001e6e:	d914      	bls.n	8001e9a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 fd03 	bl	8002880 <RCC_SetFlashLatencyFromMSIRange>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e336      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fe26 	bl	8001ada <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fe4a 	bl	8001b2c <LL_RCC_MSI_SetCalibTrimming>
 8001e98:	e013      	b.n	8001ec2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fe1b 	bl	8001ada <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fe3f 	bl	8001b2c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fce4 	bl	8002880 <RCC_SetFlashLatencyFromMSIRange>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e317      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ec2:	f000 fcc9 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4aa4      	ldr	r2, [pc, #656]	; (800215c <HAL_RCC_OscConfig+0x344>)
 8001eca:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ecc:	4ba4      	ldr	r3, [pc, #656]	; (8002160 <HAL_RCC_OscConfig+0x348>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fd55 	bl	8000980 <HAL_InitTick>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d039      	beq.n	8001f50 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e308      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d01e      	beq.n	8001f26 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ee8:	f7ff fdc8 	bl	8001a7c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eec:	f7fe fd96 	bl	8000a1c <HAL_GetTick>
 8001ef0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ef4:	f7fe fd92 	bl	8000a1c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e2f5      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f06:	f7ff fdd7 	bl	8001ab8 <LL_RCC_MSI_IsReady>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f1      	beq.n	8001ef4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fde0 	bl	8001ada <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fe04 	bl	8001b2c <LL_RCC_MSI_SetCalibTrimming>
 8001f24:	e015      	b.n	8001f52 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f26:	f7ff fdb8 	bl	8001a9a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f2a:	f7fe fd77 	bl	8000a1c <HAL_GetTick>
 8001f2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f32:	f7fe fd73 	bl	8000a1c <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e2d6      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f44:	f7ff fdb8 	bl	8001ab8 <LL_RCC_MSI_IsReady>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f1      	bne.n	8001f32 <HAL_RCC_OscConfig+0x11a>
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001f50:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d047      	beq.n	8001fee <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f5e:	f7ff fe0e 	bl	8001b7e <LL_RCC_GetSysClkSource>
 8001f62:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f64:	f7ff feef 	bl	8001d46 <LL_RCC_PLL_GetMainSource>
 8001f68:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_OscConfig+0x164>
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	2b0c      	cmp	r3, #12
 8001f74:	d108      	bne.n	8001f88 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d105      	bne.n	8001f88 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d134      	bne.n	8001fee <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e2b4      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f90:	d102      	bne.n	8001f98 <HAL_RCC_OscConfig+0x180>
 8001f92:	f7ff fbf5 	bl	8001780 <LL_RCC_HSE_Enable>
 8001f96:	e001      	b.n	8001f9c <HAL_RCC_OscConfig+0x184>
 8001f98:	f7ff fc01 	bl	800179e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d012      	beq.n	8001fca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fd3a 	bl	8000a1c <HAL_GetTick>
 8001fa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fac:	f7fe fd36 	bl	8000a1c <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e299      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001fbe:	f7ff fbfd 	bl	80017bc <LL_RCC_HSE_IsReady>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f1      	beq.n	8001fac <HAL_RCC_OscConfig+0x194>
 8001fc8:	e011      	b.n	8001fee <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fca:	f7fe fd27 	bl	8000a1c <HAL_GetTick>
 8001fce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd2:	f7fe fd23 	bl	8000a1c <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b64      	cmp	r3, #100	; 0x64
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e286      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001fe4:	f7ff fbea 	bl	80017bc <LL_RCC_HSE_IsReady>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f1      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d04c      	beq.n	8002094 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ffa:	f7ff fdc0 	bl	8001b7e <LL_RCC_GetSysClkSource>
 8001ffe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002000:	f7ff fea1 	bl	8001d46 <LL_RCC_PLL_GetMainSource>
 8002004:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	2b04      	cmp	r3, #4
 800200a:	d005      	beq.n	8002018 <HAL_RCC_OscConfig+0x200>
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2b0c      	cmp	r3, #12
 8002010:	d10e      	bne.n	8002030 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d10b      	bne.n	8002030 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e266      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fc09 	bl	8001840 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800202e:	e031      	b.n	8002094 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d019      	beq.n	800206c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002038:	f7ff fbd2 	bl	80017e0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7fe fcee 	bl	8000a1c <HAL_GetTick>
 8002040:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002044:	f7fe fcea 	bl	8000a1c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e24d      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002056:	f7ff fbe1 	bl	800181c <LL_RCC_HSI_IsReady>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f1      	beq.n	8002044 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fbeb 	bl	8001840 <LL_RCC_HSI_SetCalibTrimming>
 800206a:	e013      	b.n	8002094 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206c:	f7ff fbc7 	bl	80017fe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7fe fcd4 	bl	8000a1c <HAL_GetTick>
 8002074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002078:	f7fe fcd0 	bl	8000a1c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e233      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800208a:	f7ff fbc7 	bl	800181c <LL_RCC_HSI_IsReady>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f1      	bne.n	8002078 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80a3 	beq.w	80021f4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d076      	beq.n	80021a4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d046      	beq.n	8002150 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80020c2:	f7ff fc7e 	bl	80019c2 <LL_RCC_LSI1_IsReady>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d113      	bne.n	80020f4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80020cc:	f7ff fc57 	bl	800197e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020d0:	f7fe fca4 	bl	8000a1c <HAL_GetTick>
 80020d4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80020d8:	f7fe fca0 	bl	8000a1c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e203      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80020ea:	f7ff fc6a 	bl	80019c2 <LL_RCC_LSI1_IsReady>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f1      	beq.n	80020d8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80020f4:	f7ff fc77 	bl	80019e6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe fc90 	bl	8000a1c <HAL_GetTick>
 80020fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002100:	f7fe fc8c 	bl	8000a1c <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b03      	cmp	r3, #3
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e1ef      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002112:	f7ff fc8a 	bl	8001a2a <LL_RCC_LSI2_IsReady>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f1      	beq.n	8002100 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fc94 	bl	8001a4e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002126:	f7ff fc3b 	bl	80019a0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212a:	f7fe fc77 	bl	8000a1c <HAL_GetTick>
 800212e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002132:	f7fe fc73 	bl	8000a1c <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e1d6      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002144:	f7ff fc3d 	bl	80019c2 <LL_RCC_LSI1_IsReady>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f1      	bne.n	8002132 <HAL_RCC_OscConfig+0x31a>
 800214e:	e051      	b.n	80021f4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002150:	f7ff fc15 	bl	800197e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7fe fc62 	bl	8000a1c <HAL_GetTick>
 8002158:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800215a:	e00c      	b.n	8002176 <HAL_RCC_OscConfig+0x35e>
 800215c:	20000008 	.word	0x20000008
 8002160:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002164:	f7fe fc5a 	bl	8000a1c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e1bd      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002176:	f7ff fc24 	bl	80019c2 <LL_RCC_LSI1_IsReady>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f1      	beq.n	8002164 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002180:	f7ff fc42 	bl	8001a08 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002186:	f7fe fc49 	bl	8000a1c <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b03      	cmp	r3, #3
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e1ac      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002198:	f7ff fc47 	bl	8001a2a <LL_RCC_LSI2_IsReady>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f1      	bne.n	8002186 <HAL_RCC_OscConfig+0x36e>
 80021a2:	e027      	b.n	80021f4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80021a4:	f7ff fc30 	bl	8001a08 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a8:	f7fe fc38 	bl	8000a1c <HAL_GetTick>
 80021ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80021b0:	f7fe fc34 	bl	8000a1c <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e197      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80021c2:	f7ff fc32 	bl	8001a2a <LL_RCC_LSI2_IsReady>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f1      	bne.n	80021b0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80021cc:	f7ff fbe8 	bl	80019a0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d0:	f7fe fc24 	bl	8000a1c <HAL_GetTick>
 80021d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80021d8:	f7fe fc20 	bl	8000a1c <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e183      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80021ea:	f7ff fbea 	bl	80019c2 <LL_RCC_LSI1_IsReady>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f1      	bne.n	80021d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d05b      	beq.n	80022b8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002200:	4ba7      	ldr	r3, [pc, #668]	; (80024a0 <HAL_RCC_OscConfig+0x688>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	d114      	bne.n	8002236 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800220c:	f7fe fe96 	bl	8000f3c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002210:	f7fe fc04 	bl	8000a1c <HAL_GetTick>
 8002214:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002218:	f7fe fc00 	bl	8000a1c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e163      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800222a:	4b9d      	ldr	r3, [pc, #628]	; (80024a0 <HAL_RCC_OscConfig+0x688>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d102      	bne.n	8002244 <HAL_RCC_OscConfig+0x42c>
 800223e:	f7ff fb48 	bl	80018d2 <LL_RCC_LSE_Enable>
 8002242:	e00c      	b.n	800225e <HAL_RCC_OscConfig+0x446>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b05      	cmp	r3, #5
 800224a:	d104      	bne.n	8002256 <HAL_RCC_OscConfig+0x43e>
 800224c:	f7ff fb63 	bl	8001916 <LL_RCC_LSE_EnableBypass>
 8002250:	f7ff fb3f 	bl	80018d2 <LL_RCC_LSE_Enable>
 8002254:	e003      	b.n	800225e <HAL_RCC_OscConfig+0x446>
 8002256:	f7ff fb4d 	bl	80018f4 <LL_RCC_LSE_Disable>
 800225a:	f7ff fb6d 	bl	8001938 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d014      	beq.n	8002290 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002266:	f7fe fbd9 	bl	8000a1c <HAL_GetTick>
 800226a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800226c:	e00a      	b.n	8002284 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226e:	f7fe fbd5 	bl	8000a1c <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	f241 3288 	movw	r2, #5000	; 0x1388
 800227c:	4293      	cmp	r3, r2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e136      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002284:	f7ff fb69 	bl	800195a <LL_RCC_LSE_IsReady>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0ef      	beq.n	800226e <HAL_RCC_OscConfig+0x456>
 800228e:	e013      	b.n	80022b8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002290:	f7fe fbc4 	bl	8000a1c <HAL_GetTick>
 8002294:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002296:	e00a      	b.n	80022ae <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002298:	f7fe fbc0 	bl	8000a1c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e121      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80022ae:	f7ff fb54 	bl	800195a <LL_RCC_LSE_IsReady>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1ef      	bne.n	8002298 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d02c      	beq.n	800231e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d014      	beq.n	80022f6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022cc:	f7ff facd 	bl	800186a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7fe fba4 	bl	8000a1c <HAL_GetTick>
 80022d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022d8:	f7fe fba0 	bl	8000a1c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e103      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80022ea:	f7ff fae0 	bl	80018ae <LL_RCC_HSI48_IsReady>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f1      	beq.n	80022d8 <HAL_RCC_OscConfig+0x4c0>
 80022f4:	e013      	b.n	800231e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022f6:	f7ff fac9 	bl	800188c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fa:	f7fe fb8f 	bl	8000a1c <HAL_GetTick>
 80022fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002302:	f7fe fb8b 	bl	8000a1c <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e0ee      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002314:	f7ff facb 	bl	80018ae <LL_RCC_HSI48_IsReady>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f1      	bne.n	8002302 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80e4 	beq.w	80024f0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002328:	f7ff fc29 	bl	8001b7e <LL_RCC_GetSysClkSource>
 800232c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800232e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	2b02      	cmp	r3, #2
 800233c:	f040 80b4 	bne.w	80024a8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 0203 	and.w	r2, r3, #3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	429a      	cmp	r2, r3
 800234c:	d123      	bne.n	8002396 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d11c      	bne.n	8002396 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d114      	bne.n	8002396 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d10d      	bne.n	8002396 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002384:	429a      	cmp	r2, r3
 8002386:	d106      	bne.n	8002396 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002392:	429a      	cmp	r2, r3
 8002394:	d05d      	beq.n	8002452 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	2b0c      	cmp	r3, #12
 800239a:	d058      	beq.n	800244e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800239c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e0a1      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023ae:	f7ff fc84 	bl	8001cba <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023b2:	f7fe fb33 	bl	8000a1c <HAL_GetTick>
 80023b6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ba:	f7fe fb2f 	bl	8000a1c <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e092      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1ef      	bne.n	80023ba <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	4b30      	ldr	r3, [pc, #192]	; (80024a4 <HAL_RCC_OscConfig+0x68c>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023ec:	4311      	orrs	r1, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023f2:	0212      	lsls	r2, r2, #8
 80023f4:	4311      	orrs	r1, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023fa:	4311      	orrs	r1, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002400:	4311      	orrs	r1, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002406:	430a      	orrs	r2, r1
 8002408:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800240c:	4313      	orrs	r3, r2
 800240e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002410:	f7ff fc44 	bl	8001c9c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800241e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002422:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002424:	f7fe fafa 	bl	8000a1c <HAL_GetTick>
 8002428:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242c:	f7fe faf6 	bl	8000a1c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e059      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ef      	beq.n	800242c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800244c:	e050      	b.n	80024f0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e04f      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d147      	bne.n	80024f0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002460:	f7ff fc1c 	bl	8001c9c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800246e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002472:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002474:	f7fe fad2 	bl	8000a1c <HAL_GetTick>
 8002478:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247c:	f7fe face 	bl	8000a1c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e031      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0ef      	beq.n	800247c <HAL_RCC_OscConfig+0x664>
 800249c:	e028      	b.n	80024f0 <HAL_RCC_OscConfig+0x6d8>
 800249e:	bf00      	nop
 80024a0:	58000400 	.word	0x58000400
 80024a4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	2b0c      	cmp	r3, #12
 80024ac:	d01e      	beq.n	80024ec <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ae:	f7ff fc04 	bl	8001cba <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7fe fab3 	bl	8000a1c <HAL_GetTick>
 80024b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7fe faaf 	bl	8000a1c <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e012      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1ef      	bne.n	80024ba <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80024da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <HAL_RCC_OscConfig+0x6e4>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	60cb      	str	r3, [r1, #12]
 80024ea:	e001      	b.n	80024f0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3734      	adds	r7, #52	; 0x34
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd90      	pop	{r4, r7, pc}
 80024fa:	bf00      	nop
 80024fc:	eefefffc 	.word	0xeefefffc

08002500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e12d      	b.n	8002770 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002514:	4b98      	ldr	r3, [pc, #608]	; (8002778 <HAL_RCC_ClockConfig+0x278>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d91b      	bls.n	800255a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002522:	4b95      	ldr	r3, [pc, #596]	; (8002778 <HAL_RCC_ClockConfig+0x278>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 0207 	bic.w	r2, r3, #7
 800252a:	4993      	ldr	r1, [pc, #588]	; (8002778 <HAL_RCC_ClockConfig+0x278>)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	4313      	orrs	r3, r2
 8002530:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002532:	f7fe fa73 	bl	8000a1c <HAL_GetTick>
 8002536:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002538:	e008      	b.n	800254c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800253a:	f7fe fa6f 	bl	8000a1c <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e111      	b.n	8002770 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254c:	4b8a      	ldr	r3, [pc, #552]	; (8002778 <HAL_RCC_ClockConfig+0x278>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d1ef      	bne.n	800253a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d016      	beq.n	8002594 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fb13 	bl	8001b96 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002570:	f7fe fa54 	bl	8000a1c <HAL_GetTick>
 8002574:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002578:	f7fe fa50 	bl	8000a1c <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e0f2      	b.n	8002770 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800258a:	f7ff fbe8 	bl	8001d5e <LL_RCC_IsActiveFlag_HPRE>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f1      	beq.n	8002578 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0320 	and.w	r3, r3, #32
 800259c:	2b00      	cmp	r3, #0
 800259e:	d016      	beq.n	80025ce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fb0a 	bl	8001bbe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025aa:	f7fe fa37 	bl	8000a1c <HAL_GetTick>
 80025ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025b2:	f7fe fa33 	bl	8000a1c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e0d5      	b.n	8002770 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80025c4:	f7ff fbdd 	bl	8001d82 <LL_RCC_IsActiveFlag_C2HPRE>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f1      	beq.n	80025b2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d016      	beq.n	8002608 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fb03 	bl	8001bea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025e4:	f7fe fa1a 	bl	8000a1c <HAL_GetTick>
 80025e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025ec:	f7fe fa16 	bl	8000a1c <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e0b8      	b.n	8002770 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80025fe:	f7ff fbd3 	bl	8001da8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f1      	beq.n	80025ec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d016      	beq.n	8002642 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fafd 	bl	8001c18 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800261e:	f7fe f9fd 	bl	8000a1c <HAL_GetTick>
 8002622:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002624:	e008      	b.n	8002638 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002626:	f7fe f9f9 	bl	8000a1c <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e09b      	b.n	8002770 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002638:	f7ff fbc9 	bl	8001dce <LL_RCC_IsActiveFlag_PPRE1>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f1      	beq.n	8002626 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d017      	beq.n	800267e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff faf3 	bl	8001c40 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800265a:	f7fe f9df 	bl	8000a1c <HAL_GetTick>
 800265e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002662:	f7fe f9db 	bl	8000a1c <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e07d      	b.n	8002770 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002674:	f7ff fbbd 	bl	8001df2 <LL_RCC_IsActiveFlag_PPRE2>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f1      	beq.n	8002662 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d043      	beq.n	8002712 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d106      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002692:	f7ff f893 	bl	80017bc <LL_RCC_HSE_IsReady>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d11e      	bne.n	80026da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e067      	b.n	8002770 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d106      	bne.n	80026b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80026a8:	f7ff fb16 	bl	8001cd8 <LL_RCC_PLL_IsReady>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d113      	bne.n	80026da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e05c      	b.n	8002770 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d106      	bne.n	80026cc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80026be:	f7ff f9fb 	bl	8001ab8 <LL_RCC_MSI_IsReady>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d108      	bne.n	80026da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e051      	b.n	8002770 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80026cc:	f7ff f8a6 	bl	800181c <LL_RCC_HSI_IsReady>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e04a      	b.n	8002770 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fa39 	bl	8001b56 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e4:	f7fe f99a 	bl	8000a1c <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ec:	f7fe f996 	bl	8000a1c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e036      	b.n	8002770 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	f7ff fa3c 	bl	8001b7e <LL_RCC_GetSysClkSource>
 8002706:	4602      	mov	r2, r0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	429a      	cmp	r2, r3
 8002710:	d1ec      	bne.n	80026ec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_RCC_ClockConfig+0x278>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d21b      	bcs.n	8002758 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002720:	4b15      	ldr	r3, [pc, #84]	; (8002778 <HAL_RCC_ClockConfig+0x278>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 0207 	bic.w	r2, r3, #7
 8002728:	4913      	ldr	r1, [pc, #76]	; (8002778 <HAL_RCC_ClockConfig+0x278>)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002730:	f7fe f974 	bl	8000a1c <HAL_GetTick>
 8002734:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	e008      	b.n	800274a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002738:	f7fe f970 	bl	8000a1c <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e012      	b.n	8002770 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_ClockConfig+0x278>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d1ef      	bne.n	8002738 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002758:	f000 f87e 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 800275c:	4603      	mov	r3, r0
 800275e:	4a07      	ldr	r2, [pc, #28]	; (800277c <HAL_RCC_ClockConfig+0x27c>)
 8002760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002762:	f7fe f967 	bl	8000a34 <HAL_GetTickPrio>
 8002766:	4603      	mov	r3, r0
 8002768:	4618      	mov	r0, r3
 800276a:	f7fe f909 	bl	8000980 <HAL_InitTick>
 800276e:	4603      	mov	r3, r0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	58004000 	.word	0x58004000
 800277c:	20000008 	.word	0x20000008

08002780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002786:	f7ff f9fa 	bl	8001b7e <LL_RCC_GetSysClkSource>
 800278a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10a      	bne.n	80027a8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002792:	f7ff f9b6 	bl	8001b02 <LL_RCC_MSI_GetRange>
 8002796:	4603      	mov	r3, r0
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	4a2b      	ldr	r2, [pc, #172]	; (800284c <HAL_RCC_GetSysClockFreq+0xcc>)
 80027a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	e04b      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d102      	bne.n	80027b4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027ae:	4b28      	ldr	r3, [pc, #160]	; (8002850 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	e045      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d10a      	bne.n	80027d0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80027ba:	f7fe ffcf 	bl	800175c <LL_RCC_HSE_IsEnabledDiv2>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d102      	bne.n	80027ca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80027c4:	4b22      	ldr	r3, [pc, #136]	; (8002850 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	e03a      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80027ca:	4b22      	ldr	r3, [pc, #136]	; (8002854 <HAL_RCC_GetSysClockFreq+0xd4>)
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	e037      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80027d0:	f7ff fab9 	bl	8001d46 <LL_RCC_PLL_GetMainSource>
 80027d4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d003      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x64>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d003      	beq.n	80027ea <HAL_RCC_GetSysClockFreq+0x6a>
 80027e2:	e00d      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80027e4:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027e6:	60bb      	str	r3, [r7, #8]
        break;
 80027e8:	e015      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80027ea:	f7fe ffb7 	bl	800175c <LL_RCC_HSE_IsEnabledDiv2>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d102      	bne.n	80027fa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80027f4:	4b16      	ldr	r3, [pc, #88]	; (8002850 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027f6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80027f8:	e00d      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80027fa:	4b16      	ldr	r3, [pc, #88]	; (8002854 <HAL_RCC_GetSysClockFreq+0xd4>)
 80027fc:	60bb      	str	r3, [r7, #8]
        break;
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002800:	f7ff f97f 	bl	8001b02 <LL_RCC_MSI_GetRange>
 8002804:	4603      	mov	r3, r0
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	4a0f      	ldr	r2, [pc, #60]	; (800284c <HAL_RCC_GetSysClockFreq+0xcc>)
 800280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002812:	60bb      	str	r3, [r7, #8]
        break;
 8002814:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002816:	f7ff fa71 	bl	8001cfc <LL_RCC_PLL_GetN>
 800281a:	4602      	mov	r2, r0
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	fb03 f402 	mul.w	r4, r3, r2
 8002822:	f7ff fa84 	bl	8001d2e <LL_RCC_PLL_GetDivider>
 8002826:	4603      	mov	r3, r0
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	3301      	adds	r3, #1
 800282c:	fbb4 f4f3 	udiv	r4, r4, r3
 8002830:	f7ff fa71 	bl	8001d16 <LL_RCC_PLL_GetR>
 8002834:	4603      	mov	r3, r0
 8002836:	0f5b      	lsrs	r3, r3, #29
 8002838:	3301      	adds	r3, #1
 800283a:	fbb4 f3f3 	udiv	r3, r4, r3
 800283e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002840:	68fb      	ldr	r3, [r7, #12]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	bd90      	pop	{r4, r7, pc}
 800284a:	bf00      	nop
 800284c:	0800330c 	.word	0x0800330c
 8002850:	00f42400 	.word	0x00f42400
 8002854:	01e84800 	.word	0x01e84800

08002858 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002858:	b598      	push	{r3, r4, r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800285c:	f7ff ff90 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 8002860:	4604      	mov	r4, r0
 8002862:	f7ff fa01 	bl	8001c68 <LL_RCC_GetAHBPrescaler>
 8002866:	4603      	mov	r3, r0
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	4a03      	ldr	r2, [pc, #12]	; (800287c <HAL_RCC_GetHCLKFreq+0x24>)
 8002870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002874:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd98      	pop	{r3, r4, r7, pc}
 800287c:	080032cc 	.word	0x080032cc

08002880 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2bb0      	cmp	r3, #176	; 0xb0
 800288c:	d903      	bls.n	8002896 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e007      	b.n	80028a6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	4a11      	ldr	r2, [pc, #68]	; (80028e4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80028a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80028a6:	f7ff f9eb 	bl	8001c80 <LL_RCC_GetAHB4Prescaler>
 80028aa:	4603      	mov	r3, r0
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80028b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80028be:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80028c4:	fba2 2303 	umull	r2, r3, r2, r3
 80028c8:	0c9c      	lsrs	r4, r3, #18
 80028ca:	f7fe fb47 	bl	8000f5c <HAL_PWREx_GetVoltageRange>
 80028ce:	4603      	mov	r3, r0
 80028d0:	4619      	mov	r1, r3
 80028d2:	4620      	mov	r0, r4
 80028d4:	f000 f80c 	bl	80028f0 <RCC_SetFlashLatency>
 80028d8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd90      	pop	{r4, r7, pc}
 80028e2:	bf00      	nop
 80028e4:	0800330c 	.word	0x0800330c
 80028e8:	080032cc 	.word	0x080032cc
 80028ec:	431bde83 	.word	0x431bde83

080028f0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b093      	sub	sp, #76	; 0x4c
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80028fa:	4b37      	ldr	r3, [pc, #220]	; (80029d8 <RCC_SetFlashLatency+0xe8>)
 80028fc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002900:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002902:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002906:	4a35      	ldr	r2, [pc, #212]	; (80029dc <RCC_SetFlashLatency+0xec>)
 8002908:	f107 031c 	add.w	r3, r7, #28
 800290c:	ca07      	ldmia	r2, {r0, r1, r2}
 800290e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002912:	4b33      	ldr	r3, [pc, #204]	; (80029e0 <RCC_SetFlashLatency+0xf0>)
 8002914:	f107 040c 	add.w	r4, r7, #12
 8002918:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800291a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800291e:	2300      	movs	r3, #0
 8002920:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002928:	d11a      	bne.n	8002960 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800292a:	2300      	movs	r3, #0
 800292c:	643b      	str	r3, [r7, #64]	; 0x40
 800292e:	e013      	b.n	8002958 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	3348      	adds	r3, #72	; 0x48
 8002936:	443b      	add	r3, r7
 8002938:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	429a      	cmp	r2, r3
 8002940:	d807      	bhi.n	8002952 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	3348      	adds	r3, #72	; 0x48
 8002948:	443b      	add	r3, r7
 800294a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800294e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002950:	e020      	b.n	8002994 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002954:	3301      	adds	r3, #1
 8002956:	643b      	str	r3, [r7, #64]	; 0x40
 8002958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800295a:	2b03      	cmp	r3, #3
 800295c:	d9e8      	bls.n	8002930 <RCC_SetFlashLatency+0x40>
 800295e:	e019      	b.n	8002994 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002960:	2300      	movs	r3, #0
 8002962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002964:	e013      	b.n	800298e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	3348      	adds	r3, #72	; 0x48
 800296c:	443b      	add	r3, r7
 800296e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	429a      	cmp	r2, r3
 8002976:	d807      	bhi.n	8002988 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	3348      	adds	r3, #72	; 0x48
 800297e:	443b      	add	r3, r7
 8002980:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002984:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002986:	e005      	b.n	8002994 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298a:	3301      	adds	r3, #1
 800298c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800298e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002990:	2b02      	cmp	r3, #2
 8002992:	d9e8      	bls.n	8002966 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002994:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <RCC_SetFlashLatency+0xf4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 0207 	bic.w	r2, r3, #7
 800299c:	4911      	ldr	r1, [pc, #68]	; (80029e4 <RCC_SetFlashLatency+0xf4>)
 800299e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029a0:	4313      	orrs	r3, r2
 80029a2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80029a4:	f7fe f83a 	bl	8000a1c <HAL_GetTick>
 80029a8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80029aa:	e008      	b.n	80029be <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029ac:	f7fe f836 	bl	8000a1c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e007      	b.n	80029ce <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <RCC_SetFlashLatency+0xf4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d1ef      	bne.n	80029ac <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	374c      	adds	r7, #76	; 0x4c
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd90      	pop	{r4, r7, pc}
 80029d6:	bf00      	nop
 80029d8:	080032a0 	.word	0x080032a0
 80029dc:	080032b0 	.word	0x080032b0
 80029e0:	080032bc 	.word	0x080032bc
 80029e4:	58004000 	.word	0x58004000

080029e8 <LL_RCC_LSE_IsEnabled>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80029ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <LL_RCC_LSE_IsEnabled+0x18>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <LL_RCC_LSE_IsEnabled+0x1a>
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_RCC_LSE_IsReady>:
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d101      	bne.n	8002a24 <LL_RCC_LSE_IsReady+0x18>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <LL_RCC_LSE_IsReady+0x1a>
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_RCC_SetRFWKPClockSource>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_RCC_SetSMPSClockSource>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	f023 0203 	bic.w	r2, r3, #3
 8002a6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_RCC_SetSMPSPrescaler>:
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <LL_RCC_SetUSARTClockSource>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abc:	f023 0203 	bic.w	r2, r3, #3
 8002ac0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_RCC_SetLPUARTClockSource>:
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_RCC_SetI2CClockSource>:
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	401a      	ands	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <LL_RCC_SetLPTIMClockSource>:
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	041b      	lsls	r3, r3, #16
 8002b54:	43db      	mvns	r3, r3
 8002b56:	401a      	ands	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	041b      	lsls	r3, r3, #16
 8002b5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <LL_RCC_SetSAIClockSource>:
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <LL_RCC_SetRNGClockSource>:
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002bb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_RCC_SetCLK48ClockSource>:
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <LL_RCC_SetUSBClockSource>:
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff ffe3 	bl	8002bca <LL_RCC_SetCLK48ClockSource>
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <LL_RCC_SetADCClockSource>:
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_RCC_SetRTCClockSource>:
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_RCC_GetRTCClockSource>:
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <LL_RCC_ForceBackupDomainReset>:
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <LL_RCC_PLLSAI1_Enable>:
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cd4:	6013      	str	r3, [r2, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_RCC_PLLSAI1_Disable>:
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cf2:	6013      	str	r3, [r2, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <LL_RCC_PLLSAI1_IsReady>:
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d10:	d101      	bne.n	8002d16 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b088      	sub	sp, #32
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002d2e:	2300      	movs	r3, #0
 8002d30:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d034      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d46:	d021      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002d48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d4c:	d81b      	bhi.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d52:	d01d      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002d54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d58:	d815      	bhi.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d62:	d110      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d72:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002d74:	e00d      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 f947 	bl	800300e <RCCEx_PLLSAI1_ConfigNP>
 8002d80:	4603      	mov	r3, r0
 8002d82:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002d84:	e005      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	77fb      	strb	r3, [r7, #31]
        break;
 8002d8a:	e002      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002d8c:	bf00      	nop
 8002d8e:	e000      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d92:	7ffb      	ldrb	r3, [r7, #31]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d105      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fee8 	bl	8002b72 <LL_RCC_SetSAIClockSource>
 8002da2:	e001      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da4:	7ffb      	ldrb	r3, [r7, #31]
 8002da6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d046      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002db4:	f7ff ff56 	bl	8002c64 <LL_RCC_GetRTCClockSource>
 8002db8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d03c      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002dc4:	f7fe f8ba 	bl	8000f3c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d105      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ff30 	bl	8002c38 <LL_RCC_SetRTCClockSource>
 8002dd8:	e02e      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002de4:	f7ff ff4b 	bl	8002c7e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002de8:	f7ff ff5a 	bl	8002ca0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002dfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002e04:	f7ff fdf0 	bl	80029e8 <LL_RCC_LSE_IsEnabled>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d114      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e0e:	f7fd fe05 	bl	8000a1c <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002e14:	e00b      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7fd fe01 	bl	8000a1c <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d902      	bls.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	77fb      	strb	r3, [r7, #31]
              break;
 8002e2c:	e004      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002e2e:	f7ff fded 	bl	8002a0c <LL_RCC_LSE_IsReady>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d1ee      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002e38:	7ffb      	ldrb	r3, [r7, #31]
 8002e3a:	77bb      	strb	r3, [r7, #30]
 8002e3c:	e001      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e3e:	7ffb      	ldrb	r3, [r7, #31]
 8002e40:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d004      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fe2a 	bl	8002aac <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d004      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fe35 	bl	8002ad8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d004      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fe5d 	bl	8002b3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d004      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fe52 	bl	8002b3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d004      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fe2a 	bl	8002b04 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d004      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fe1f 	bl	8002b04 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d022      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fe8d 	bl	8002bf6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ef0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002efe:	d10b      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3304      	adds	r3, #4
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 f8dd 	bl	80030c4 <RCCEx_PLLSAI1_ConfigNQ>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002f0e:	7ffb      	ldrb	r3, [r7, #31]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002f14:	7ffb      	ldrb	r3, [r7, #31]
 8002f16:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d02b      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2c:	d008      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f36:	d003      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d105      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fe2a 	bl	8002b9e <LL_RCC_SetRNGClockSource>
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	2000      	movs	r0, #0
 8002f58:	f7ff fe21 	bl	8002b9e <LL_RCC_SetRNGClockSource>
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f7ff fe34 	bl	8002bca <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f66:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002f6a:	d107      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d022      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fe3d 	bl	8002c0c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f9a:	d107      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002faa:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fb4:	d10b      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f8dd 	bl	800317a <RCCEx_PLLSAI1_ConfigNR>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002fc4:	7ffb      	ldrb	r3, [r7, #31]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002fca:	7ffb      	ldrb	r3, [r7, #31]
 8002fcc:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d004      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fd26 	bl	8002a30 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d009      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fd45 	bl	8002a84 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fd2c 	bl	8002a5c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003004:	7fbb      	ldrb	r3, [r7, #30]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3720      	adds	r7, #32
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800301a:	f7ff fe61 	bl	8002ce0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800301e:	f7fd fcfd 	bl	8000a1c <HAL_GetTick>
 8003022:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003024:	e009      	b.n	800303a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003026:	f7fd fcf9 	bl	8000a1c <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d902      	bls.n	800303a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	73fb      	strb	r3, [r7, #15]
      break;
 8003038:	e004      	b.n	8003044 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800303a:	f7ff fe60 	bl	8002cfe <LL_RCC_PLLSAI1_IsReady>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f0      	bne.n	8003026 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d137      	bne.n	80030ba <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800304a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800305e:	4313      	orrs	r3, r2
 8003060:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003074:	4313      	orrs	r3, r2
 8003076:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003078:	f7ff fe23 	bl	8002cc2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800307c:	f7fd fcce 	bl	8000a1c <HAL_GetTick>
 8003080:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003082:	e009      	b.n	8003098 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003084:	f7fd fcca 	bl	8000a1c <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d902      	bls.n	8003098 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	73fb      	strb	r3, [r7, #15]
        break;
 8003096:	e004      	b.n	80030a2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003098:	f7ff fe31 	bl	8002cfe <LL_RCC_PLLSAI1_IsReady>
 800309c:	4603      	mov	r3, r0
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d1f0      	bne.n	8003084 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d108      	bne.n	80030ba <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80030a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030b6:	4313      	orrs	r3, r2
 80030b8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80030d0:	f7ff fe06 	bl	8002ce0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030d4:	f7fd fca2 	bl	8000a1c <HAL_GetTick>
 80030d8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030da:	e009      	b.n	80030f0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030dc:	f7fd fc9e 	bl	8000a1c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d902      	bls.n	80030f0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	73fb      	strb	r3, [r7, #15]
      break;
 80030ee:	e004      	b.n	80030fa <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030f0:	f7ff fe05 	bl	8002cfe <LL_RCC_PLLSAI1_IsReady>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d137      	bne.n	8003170 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003114:	4313      	orrs	r3, r2
 8003116:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800312a:	4313      	orrs	r3, r2
 800312c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800312e:	f7ff fdc8 	bl	8002cc2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003132:	f7fd fc73 	bl	8000a1c <HAL_GetTick>
 8003136:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003138:	e009      	b.n	800314e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800313a:	f7fd fc6f 	bl	8000a1c <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d902      	bls.n	800314e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	73fb      	strb	r3, [r7, #15]
        break;
 800314c:	e004      	b.n	8003158 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800314e:	f7ff fdd6 	bl	8002cfe <LL_RCC_PLLSAI1_IsReady>
 8003152:	4603      	mov	r3, r0
 8003154:	2b01      	cmp	r3, #1
 8003156:	d1f0      	bne.n	800313a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d108      	bne.n	8003170 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800315e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800316c:	4313      	orrs	r3, r2
 800316e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003170:	7bfb      	ldrb	r3, [r7, #15]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003186:	f7ff fdab 	bl	8002ce0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800318a:	f7fd fc47 	bl	8000a1c <HAL_GetTick>
 800318e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003190:	e009      	b.n	80031a6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003192:	f7fd fc43 	bl	8000a1c <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d902      	bls.n	80031a6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	73fb      	strb	r3, [r7, #15]
      break;
 80031a4:	e004      	b.n	80031b0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031a6:	f7ff fdaa 	bl	8002cfe <LL_RCC_PLLSAI1_IsReady>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f0      	bne.n	8003192 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d137      	bne.n	8003226 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80031b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ca:	4313      	orrs	r3, r2
 80031cc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80031ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031e0:	4313      	orrs	r3, r2
 80031e2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80031e4:	f7ff fd6d 	bl	8002cc2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e8:	f7fd fc18 	bl	8000a1c <HAL_GetTick>
 80031ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80031ee:	e009      	b.n	8003204 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031f0:	f7fd fc14 	bl	8000a1c <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d902      	bls.n	8003204 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	73fb      	strb	r3, [r7, #15]
        break;
 8003202:	e004      	b.n	800320e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003204:	f7ff fd7b 	bl	8002cfe <LL_RCC_PLLSAI1_IsReady>
 8003208:	4603      	mov	r3, r0
 800320a:	2b01      	cmp	r3, #1
 800320c:	d1f0      	bne.n	80031f0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d108      	bne.n	8003226 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003222:	4313      	orrs	r3, r2
 8003224:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003226:	7bfb      	ldrb	r3, [r7, #15]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <__libc_init_array>:
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	4d0d      	ldr	r5, [pc, #52]	; (8003268 <__libc_init_array+0x38>)
 8003234:	4c0d      	ldr	r4, [pc, #52]	; (800326c <__libc_init_array+0x3c>)
 8003236:	1b64      	subs	r4, r4, r5
 8003238:	10a4      	asrs	r4, r4, #2
 800323a:	2600      	movs	r6, #0
 800323c:	42a6      	cmp	r6, r4
 800323e:	d109      	bne.n	8003254 <__libc_init_array+0x24>
 8003240:	4d0b      	ldr	r5, [pc, #44]	; (8003270 <__libc_init_array+0x40>)
 8003242:	4c0c      	ldr	r4, [pc, #48]	; (8003274 <__libc_init_array+0x44>)
 8003244:	f000 f820 	bl	8003288 <_init>
 8003248:	1b64      	subs	r4, r4, r5
 800324a:	10a4      	asrs	r4, r4, #2
 800324c:	2600      	movs	r6, #0
 800324e:	42a6      	cmp	r6, r4
 8003250:	d105      	bne.n	800325e <__libc_init_array+0x2e>
 8003252:	bd70      	pop	{r4, r5, r6, pc}
 8003254:	f855 3b04 	ldr.w	r3, [r5], #4
 8003258:	4798      	blx	r3
 800325a:	3601      	adds	r6, #1
 800325c:	e7ee      	b.n	800323c <__libc_init_array+0xc>
 800325e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003262:	4798      	blx	r3
 8003264:	3601      	adds	r6, #1
 8003266:	e7f2      	b.n	800324e <__libc_init_array+0x1e>
 8003268:	0800334c 	.word	0x0800334c
 800326c:	0800334c 	.word	0x0800334c
 8003270:	0800334c 	.word	0x0800334c
 8003274:	08003350 	.word	0x08003350

08003278 <memset>:
 8003278:	4402      	add	r2, r0
 800327a:	4603      	mov	r3, r0
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <memset+0xa>
 8003280:	4770      	bx	lr
 8003282:	f803 1b01 	strb.w	r1, [r3], #1
 8003286:	e7f9      	b.n	800327c <memset+0x4>

08003288 <_init>:
 8003288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328a:	bf00      	nop
 800328c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800328e:	bc08      	pop	{r3}
 8003290:	469e      	mov	lr, r3
 8003292:	4770      	bx	lr

08003294 <_fini>:
 8003294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003296:	bf00      	nop
 8003298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329a:	bc08      	pop	{r3}
 800329c:	469e      	mov	lr, r3
 800329e:	4770      	bx	lr
