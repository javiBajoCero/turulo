
turulo_luminoso_extFLASHtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c84  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002dc0  08002dc0  00012dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002e6c  08002e6c  00012e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e70  08002e70  00012e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000004  08002e74  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000078  20000014  08002e84  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000008c  08002e84  0002008c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c072  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001eeb  00000000  00000000  0002c0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000010e8  00000000  00000000  0002dfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ff0  00000000  00000000  0002f090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002067a  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c469  00000000  00000000  000506fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000cf0d1  00000000  00000000  0005cb63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0012bc34  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000449c  00000000  00000000  0012bc84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08002da8 	.word	0x08002da8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08002da8 	.word	0x08002da8

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr

080001ae <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001ae:	b580      	push	{r7, lr}
 80001b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b2:	2002      	movs	r0, #2
 80001b4:	f7ff ffe2 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b8:	2001      	movs	r0, #1
 80001ba:	f7ff ffdf 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001be:	2008      	movs	r0, #8
 80001c0:	f7ff ffdc 	bl	800017c <LL_AHB2_GRP1_EnableClock>

}
 80001c4:	bf00      	nop
 80001c6:	bd80      	pop	{r7, pc}

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 faaf 	bl	8000730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f823 	bl	800021c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001d6:	f000 f87d 	bl	80002d4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f7ff ffe8 	bl	80001ae <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80001de:	f000 f8cd 	bl	800037c <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  int32_t memstatus=S25FL128S_GetFlashInfo(&flashmemoryinfo);
 80001e2:	480b      	ldr	r0, [pc, #44]	; (8000210 <main+0x48>)
 80001e4:	f000 f94a 	bl	800047c <S25FL128S_GetFlashInfo>
 80001e8:	6078      	str	r0, [r7, #4]
  	  	  memstatus=S25FL128S_EnableMemoryMappedModeSTR(&hqspi, S25FL128S_QPI_MODE);
 80001ea:	2106      	movs	r1, #6
 80001ec:	4809      	ldr	r0, [pc, #36]	; (8000214 <main+0x4c>)
 80001ee:	f000 f965 	bl	80004bc <S25FL128S_EnableMemoryMappedModeSTR>
 80001f2:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  *memPointer=0xA;
 80001f4:	4b08      	ldr	r3, [pc, #32]	; (8000218 <main+0x50>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	220a      	movs	r2, #10
 80001fa:	601a      	str	r2, [r3, #0]
	  memPointer++;
 80001fc:	4b06      	ldr	r3, [pc, #24]	; (8000218 <main+0x50>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	3304      	adds	r3, #4
 8000202:	4a05      	ldr	r2, [pc, #20]	; (8000218 <main+0x50>)
 8000204:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1000);
 8000206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020a:	f000 fb17 	bl	800083c <HAL_Delay>
	  *memPointer=0xA;
 800020e:	e7f1      	b.n	80001f4 <main+0x2c>
 8000210:	20000030 	.word	0x20000030
 8000214:	20000044 	.word	0x20000044
 8000218:	20000004 	.word	0x20000004

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b09a      	sub	sp, #104	; 0x68
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0320 	add.w	r3, r7, #32
 8000226:	2248      	movs	r2, #72	; 0x48
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f002 fdb4 	bl	8002d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]
 800023c:	611a      	str	r2, [r3, #16]
 800023e:	615a      	str	r2, [r3, #20]
 8000240:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000242:	4b23      	ldr	r3, [pc, #140]	; (80002d0 <SystemClock_Config+0xb4>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800024a:	4a21      	ldr	r2, [pc, #132]	; (80002d0 <SystemClock_Config+0xb4>)
 800024c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000250:	6013      	str	r3, [r2, #0]
 8000252:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <SystemClock_Config+0xb4>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800025a:	603b      	str	r3, [r7, #0]
 800025c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800025e:	2323      	movs	r3, #35	; 0x23
 8000260:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000266:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800026c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000272:	2340      	movs	r3, #64	; 0x40
 8000274:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000276:	2300      	movs	r3, #0
 8000278:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800027a:	23a0      	movs	r3, #160	; 0xa0
 800027c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027e:	2300      	movs	r3, #0
 8000280:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0320 	add.w	r3, r7, #32
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fb56 	bl	8001938 <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000292:	f000 f83c 	bl	800030e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000296:	236f      	movs	r3, #111	; 0x6f
 8000298:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2101      	movs	r1, #1
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 feb2 	bl	8002020 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80002c2:	f000 f824 	bl	800030e <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3768      	adds	r7, #104	; 0x68
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	58000400 	.word	0x58000400

080002d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b094      	sub	sp, #80	; 0x50
 80002d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002da:	463b      	mov	r3, r7
 80002dc:	2250      	movs	r2, #80	; 0x50
 80002de:	2100      	movs	r1, #0
 80002e0:	4618      	mov	r0, r3
 80002e2:	f002 fd59 	bl	8002d98 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80002e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002ea:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80002ec:	2300      	movs	r3, #0
 80002ee:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80002f0:	2310      	movs	r3, #16
 80002f2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80002f4:	463b      	mov	r3, r7
 80002f6:	4618      	mov	r0, r3
 80002f8:	f002 faa3 	bl	8002842 <HAL_RCCEx_PeriphCLKConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000302:	f000 f804 	bl	800030e <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000306:	bf00      	nop
 8000308:	3750      	adds	r7, #80	; 0x50
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}

0800030e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000312:	b672      	cpsid	i
}
 8000314:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000316:	e7fe      	b.n	8000316 <Error_Handler+0x8>

08000318 <LL_AHB2_GRP1_EnableClock>:
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000324:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000326:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4313      	orrs	r3, r2
 800032e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000334:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4013      	ands	r3, r2
 800033a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800033c:	68fb      	ldr	r3, [r7, #12]
}
 800033e:	bf00      	nop
 8000340:	3714      	adds	r7, #20
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr

0800034a <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800034a:	b480      	push	{r7}
 800034c:	b085      	sub	sp, #20
 800034e:	af00      	add	r7, sp, #0
 8000350:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000356:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000358:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4313      	orrs	r3, r2
 8000360:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000366:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4013      	ands	r3, r2
 800036c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800036e:	68fb      	ldr	r3, [r7, #12]
}
 8000370:	bf00      	nop
 8000372:	3714      	adds	r7, #20
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000380:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <MX_QUADSPI_Init+0x44>)
 8000382:	4a10      	ldr	r2, [pc, #64]	; (80003c4 <MX_QUADSPI_Init+0x48>)
 8000384:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <MX_QUADSPI_Init+0x44>)
 8000388:	22ff      	movs	r2, #255	; 0xff
 800038a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <MX_QUADSPI_Init+0x44>)
 800038e:	2201      	movs	r2, #1
 8000390:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000392:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <MX_QUADSPI_Init+0x44>)
 8000394:	2200      	movs	r2, #0
 8000396:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MX_QUADSPI_Init+0x44>)
 800039a:	2201      	movs	r2, #1
 800039c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <MX_QUADSPI_Init+0x44>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <MX_QUADSPI_Init+0x44>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80003aa:	4805      	ldr	r0, [pc, #20]	; (80003c0 <MX_QUADSPI_Init+0x44>)
 80003ac:	f000 fcdc 	bl	8000d68 <HAL_QSPI_Init>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80003b6:	f7ff ffaa 	bl	800030e <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	20000044 	.word	0x20000044
 80003c4:	a0001000 	.word	0xa0001000

080003c8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b088      	sub	sp, #32
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d0:	f107 030c 	add.w	r3, r7, #12
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a22      	ldr	r2, [pc, #136]	; (8000470 <HAL_QSPI_MspInit+0xa8>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d13e      	bne.n	8000468 <HAL_QSPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80003ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003ee:	f7ff ffac 	bl	800034a <LL_AHB3_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f2:	2002      	movs	r0, #2
 80003f4:	f7ff ff90 	bl	8000318 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f8:	2001      	movs	r0, #1
 80003fa:	f7ff ff8d 	bl	8000318 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80003fe:	2008      	movs	r0, #8
 8000400:	f7ff ff8a 	bl	8000318 <LL_AHB2_GRP1_EnableClock>
    PD7     ------> QUADSPI_BK1_IO3
    PD3     ------> QUADSPI_BK1_NCS
    PD5     ------> QUADSPI_BK1_IO1
    PD6     ------> QUADSPI_BK1_IO2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000408:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800040a:	2302      	movs	r3, #2
 800040c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000416:	230a      	movs	r3, #10
 8000418:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800041a:	f107 030c 	add.w	r3, r7, #12
 800041e:	4619      	mov	r1, r3
 8000420:	4814      	ldr	r0, [pc, #80]	; (8000474 <HAL_QSPI_MspInit+0xac>)
 8000422:	f000 fb13 	bl	8000a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000426:	2308      	movs	r3, #8
 8000428:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800042a:	2302      	movs	r3, #2
 800042c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000432:	2300      	movs	r3, #0
 8000434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000436:	230a      	movs	r3, #10
 8000438:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043a:	f107 030c 	add.w	r3, r7, #12
 800043e:	4619      	mov	r1, r3
 8000440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000444:	f000 fb02 	bl	8000a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 8000448:	23e8      	movs	r3, #232	; 0xe8
 800044a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800044c:	2302      	movs	r3, #2
 800044e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2300      	movs	r3, #0
 8000456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000458:	230a      	movs	r3, #10
 800045a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800045c:	f107 030c 	add.w	r3, r7, #12
 8000460:	4619      	mov	r1, r3
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <HAL_QSPI_MspInit+0xb0>)
 8000464:	f000 faf2 	bl	8000a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000468:	bf00      	nop
 800046a:	3720      	adds	r7, #32
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	a0001000 	.word	0xa0001000
 8000474:	48000400 	.word	0x48000400
 8000478:	48000c00 	.word	0x48000c00

0800047c <S25FL128S_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval QSPI memory status
  */
int32_t S25FL128S_GetFlashInfo(S25FL128S_Info_t *pInfo)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize = S25FL128S_FLASH_SIZE;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800048a:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize = S25FL128S_SECTOR_SIZE;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000492:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber = (S25FL128S_FLASH_SIZE/S25FL128S_SECTOR_SIZE);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800049a:	609a      	str	r2, [r3, #8]
  pInfo->ProgPageSize = S25FL128S_PAGE_SIZE;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004a2:	60da      	str	r2, [r3, #12]
  pInfo->ProgPagesNumber = (S25FL128S_FLASH_SIZE/S25FL128S_PAGE_SIZE);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004aa:	611a      	str	r2, [r3, #16]

  return S25FL128S_OK;
 80004ac:	2300      	movs	r3, #0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
	...

080004bc <S25FL128S_EnableMemoryMappedModeSTR>:
  * @param  Ctx QSPI handle
  * @param  Mode Flash mode
  * @retval QSPI memory status
  */
int32_t S25FL128S_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, S25FL128S_Interface_t Mode)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b092      	sub	sp, #72	; 0x48
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	460b      	mov	r3, r1
 80004c6:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  switch(Mode)
 80004c8:	78fb      	ldrb	r3, [r7, #3]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	2b03      	cmp	r3, #3
 80004ce:	d843      	bhi.n	8000558 <S25FL128S_EnableMemoryMappedModeSTR+0x9c>
 80004d0:	a201      	add	r2, pc, #4	; (adr r2, 80004d8 <S25FL128S_EnableMemoryMappedModeSTR+0x1c>)
 80004d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d6:	bf00      	nop
 80004d8:	080004e9 	.word	0x080004e9
 80004dc:	08000505 	.word	0x08000505
 80004e0:	08000521 	.word	0x08000521
 80004e4:	0800053d 	.word	0x0800053d
  {
  case S25FL128S_SPI_1I2O_MODE :           /* 1-1-2 read commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80004e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.Instruction     = S25FL128S_DUAL_OUT_FAST_READ_4_BYTE_ADDR_CMD;
 80004ee:	233c      	movs	r3, #60	; 0x3c
 80004f0:	617b      	str	r3, [r7, #20]
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 80004f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f6:	633b      	str	r3, [r7, #48]	; 0x30
    s_command.DataMode        = QSPI_DATA_2_LINES;
 80004f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004fc:	63bb      	str	r3, [r7, #56]	; 0x38
    s_command.DummyCycles     = S25FL128S_DUMMY_CYCLES_READ;
 80004fe:	2308      	movs	r3, #8
 8000500:	62bb      	str	r3, [r7, #40]	; 0x28
    break;
 8000502:	e037      	b.n	8000574 <S25FL128S_EnableMemoryMappedModeSTR+0xb8>

  case S25FL128S_SPI_2IO_MODE :           /* 1-2-2 read commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000508:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.Instruction     = S25FL128S_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800050a:	23bc      	movs	r3, #188	; 0xbc
 800050c:	617b      	str	r3, [r7, #20]
    s_command.AddressMode     = QSPI_ADDRESS_2_LINES;
 800050e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000512:	633b      	str	r3, [r7, #48]	; 0x30
    s_command.DataMode        = QSPI_DATA_2_LINES;
 8000514:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000518:	63bb      	str	r3, [r7, #56]	; 0x38
    s_command.DummyCycles     = S25FL128S_DUMMY_CYCLES_READ_DUAL_INOUT;
 800051a:	2304      	movs	r3, #4
 800051c:	62bb      	str	r3, [r7, #40]	; 0x28
    break;
 800051e:	e029      	b.n	8000574 <S25FL128S_EnableMemoryMappedModeSTR+0xb8>

  case S25FL128S_SPI_1I4O_MODE :           /* 1-1-4 read commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000524:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.Instruction     = S25FL128S_QUAD_OUT_FAST_READ_4_BYTE_ADDR_CMD;
 8000526:	236c      	movs	r3, #108	; 0x6c
 8000528:	617b      	str	r3, [r7, #20]
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 800052a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800052e:	633b      	str	r3, [r7, #48]	; 0x30
    s_command.DataMode        = QSPI_DATA_4_LINES;
 8000530:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000534:	63bb      	str	r3, [r7, #56]	; 0x38
    s_command.DummyCycles     = S25FL128S_DUMMY_CYCLES_READ;
 8000536:	2308      	movs	r3, #8
 8000538:	62bb      	str	r3, [r7, #40]	; 0x28
    break;
 800053a:	e01b      	b.n	8000574 <S25FL128S_EnableMemoryMappedModeSTR+0xb8>

  case S25FL128S_SPI_4IO_MODE :           /* 1-4-4 read commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800053c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000540:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.Instruction     = S25FL128S_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8000542:	23ec      	movs	r3, #236	; 0xec
 8000544:	617b      	str	r3, [r7, #20]
    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 8000546:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800054a:	633b      	str	r3, [r7, #48]	; 0x30
    s_command.DataMode        = QSPI_DATA_4_LINES;
 800054c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000550:	63bb      	str	r3, [r7, #56]	; 0x38
    s_command.DummyCycles     = S25FL128S_DUMMY_CYCLES_READ_QUAD_INOUT;
 8000552:	2306      	movs	r3, #6
 8000554:	62bb      	str	r3, [r7, #40]	; 0x28
    break;
 8000556:	e00d      	b.n	8000574 <S25FL128S_EnableMemoryMappedModeSTR+0xb8>

  case S25FL128S_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
  default:
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800055c:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.Instruction     = S25FL128S_FAST_READ_4_BYTE_ADDR_CMD;
 800055e:	230c      	movs	r3, #12
 8000560:	617b      	str	r3, [r7, #20]
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 8000562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
    s_command.DataMode        = QSPI_DATA_1_LINE;
 8000568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800056c:	63bb      	str	r3, [r7, #56]	; 0x38
    s_command.DummyCycles     = S25FL128S_DUMMY_CYCLES_READ;
 800056e:	2308      	movs	r3, #8
 8000570:	62bb      	str	r3, [r7, #40]	; 0x28
    break;
 8000572:	bf00      	nop
  }

  s_command.DummyCycles        = S25FL128S_DUMMY_CYCLES_READ;
 8000574:	2308      	movs	r3, #8
 8000576:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode  = QSPI_ALTERNATE_BYTES_NONE;
 8000578:	2300      	movs	r3, #0
 800057a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 800057c:	2300      	movs	r3, #0
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  /* Configure the command for the read instruction */
  s_command.AddressSize        = QSPI_ADDRESS_32_BITS;
 8000580:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000584:	623b      	str	r3, [r7, #32]
  s_command.DdrMode            = QSPI_DDR_MODE_DISABLE;
 8000586:	2300      	movs	r3, #0
 8000588:	643b      	str	r3, [r7, #64]	; 0x40
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
  s_mem_mapped_cfg.TimeOutPeriod     = 0x00;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8000592:	f107 020c 	add.w	r2, r7, #12
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f000 fc59 	bl	8000e54 <HAL_QSPI_MemoryMapped>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d002      	beq.n	80005ae <S25FL128S_EnableMemoryMappedModeSTR+0xf2>
  {
    return S25FL128S_ERROR;
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ac:	e000      	b.n	80005b0 <S25FL128S_EnableMemoryMappedModeSTR+0xf4>
  }

  return S25FL128S_OK;
 80005ae:	2300      	movs	r3, #0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3748      	adds	r7, #72	; 0x48
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <NMI_Handler+0x4>

080005cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <HardFault_Handler+0x4>

080005d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <MemManage_Handler+0x4>

080005d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <BusFault_Handler+0x4>

080005de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <UsageFault_Handler+0x4>

080005e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000612:	f000 f8e7 	bl	80007e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000620:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <SystemInit+0x98>)
 8000622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000626:	4a23      	ldr	r2, [pc, #140]	; (80006b4 <SystemInit+0x98>)
 8000628:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800062c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000644:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000648:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800064a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <SystemInit+0x9c>)
 8000656:	4013      	ands	r3, r2
 8000658:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800065a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800065e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000666:	f023 0305 	bic.w	r3, r3, #5
 800066a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800066e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000672:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800067a:	f023 0301 	bic.w	r3, r3, #1
 800067e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000686:	4a0d      	ldr	r2, [pc, #52]	; (80006bc <SystemInit+0xa0>)
 8000688:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800068a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <SystemInit+0xa0>)
 8000690:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800069c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00
 80006b8:	faf6fefb 	.word	0xfaf6fefb
 80006bc:	22041000 	.word	0x22041000

080006c0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80006c0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c4:	3304      	adds	r3, #4

080006c6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80006ca:	d3f9      	bcc.n	80006c0 <CopyDataInit>
  bx lr
 80006cc:	4770      	bx	lr

080006ce <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80006ce:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80006d0:	3004      	adds	r0, #4

080006d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80006d2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80006d4:	d3fb      	bcc.n	80006ce <FillZerobss>
  bx lr
 80006d6:	4770      	bx	lr

080006d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80006da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006dc:	f7ff ff9e 	bl	800061c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80006e0:	480b      	ldr	r0, [pc, #44]	; (8000710 <LoopForever+0x8>)
 80006e2:	490c      	ldr	r1, [pc, #48]	; (8000714 <LoopForever+0xc>)
 80006e4:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <LoopForever+0x10>)
 80006e6:	2300      	movs	r3, #0
 80006e8:	f7ff ffed 	bl	80006c6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80006ec:	480b      	ldr	r0, [pc, #44]	; (800071c <LoopForever+0x14>)
 80006ee:	490c      	ldr	r1, [pc, #48]	; (8000720 <LoopForever+0x18>)
 80006f0:	2300      	movs	r3, #0
 80006f2:	f7ff ffee 	bl	80006d2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80006f6:	480b      	ldr	r0, [pc, #44]	; (8000724 <LoopForever+0x1c>)
 80006f8:	490b      	ldr	r1, [pc, #44]	; (8000728 <LoopForever+0x20>)
 80006fa:	2300      	movs	r3, #0
 80006fc:	f7ff ffe9 	bl	80006d2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000700:	f002 fb26 	bl	8002d50 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000704:	f7ff fd60 	bl	80001c8 <main>

08000708 <LoopForever>:

LoopForever:
  b LoopForever
 8000708:	e7fe      	b.n	8000708 <LoopForever>
 800070a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800070c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000710:	20000004 	.word	0x20000004
 8000714:	20000014 	.word	0x20000014
 8000718:	08002e74 	.word	0x08002e74
  INIT_BSS _sbss, _ebss
 800071c:	20000014 	.word	0x20000014
 8000720:	2000008c 	.word	0x2000008c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000724:	20030000 	.word	0x20030000
 8000728:	20030000 	.word	0x20030000

0800072c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC1_IRQHandler>
	...

08000730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000736:	2300      	movs	r3, #0
 8000738:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_Init+0x3c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a0b      	ldr	r2, [pc, #44]	; (800076c <HAL_Init+0x3c>)
 8000740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000744:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000746:	2003      	movs	r0, #3
 8000748:	f000 f94e 	bl	80009e8 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800074c:	200f      	movs	r0, #15
 800074e:	f000 f80f 	bl	8000770 <HAL_InitTick>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d002      	beq.n	800075e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000758:	2301      	movs	r3, #1
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	e001      	b.n	8000762 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800075e:	f7ff ff2b 	bl	80005b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000762:	79fb      	ldrb	r3, [r7, #7]
}
 8000764:	4618      	mov	r0, r3
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	58004000 	.word	0x58004000

08000770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000778:	2300      	movs	r3, #0
 800077a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <HAL_InitTick+0x6c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d024      	beq.n	80007ce <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000784:	f001 fdf8 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 8000788:	4602      	mov	r2, r0
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <HAL_InitTick+0x6c>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	4619      	mov	r1, r3
 8000790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000794:	fbb3 f3f1 	udiv	r3, r3, r1
 8000798:	fbb2 f3f3 	udiv	r3, r2, r3
 800079c:	4618      	mov	r0, r3
 800079e:	f000 f948 	bl	8000a32 <HAL_SYSTICK_Config>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d10f      	bne.n	80007c8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b0f      	cmp	r3, #15
 80007ac:	d809      	bhi.n	80007c2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ae:	2200      	movs	r2, #0
 80007b0:	6879      	ldr	r1, [r7, #4]
 80007b2:	f04f 30ff 	mov.w	r0, #4294967295
 80007b6:	f000 f922 	bl	80009fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007ba:	4a09      	ldr	r2, [pc, #36]	; (80007e0 <HAL_InitTick+0x70>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	e007      	b.n	80007d2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	73fb      	strb	r3, [r7, #15]
 80007c6:	e004      	b.n	80007d2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80007c8:	2301      	movs	r3, #1
 80007ca:	73fb      	strb	r3, [r7, #15]
 80007cc:	e001      	b.n	80007d2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000010 	.word	0x20000010
 80007e0:	2000000c 	.word	0x2000000c

080007e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_IncTick+0x20>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_IncTick+0x24>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	4a04      	ldr	r2, [pc, #16]	; (8000808 <HAL_IncTick+0x24>)
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000010 	.word	0x20000010
 8000808:	20000088 	.word	0x20000088

0800080c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return uwTick;
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <HAL_GetTick+0x14>)
 8000812:	681b      	ldr	r3, [r3, #0]
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20000088 	.word	0x20000088

08000824 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <HAL_GetTickPrio+0x14>)
 800082a:	681b      	ldr	r3, [r3, #0]
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	2000000c 	.word	0x2000000c

0800083c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000844:	f7ff ffe2 	bl	800080c <HAL_GetTick>
 8000848:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000854:	d005      	beq.n	8000862 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <HAL_Delay+0x44>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	461a      	mov	r2, r3
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	4413      	add	r3, r2
 8000860:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000862:	bf00      	nop
 8000864:	f7ff ffd2 	bl	800080c <HAL_GetTick>
 8000868:	4602      	mov	r2, r0
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	429a      	cmp	r2, r3
 8000872:	d8f7      	bhi.n	8000864 <HAL_Delay+0x28>
    {
    }
  }
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000010 	.word	0x20000010

08000884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a0:	4013      	ands	r3, r2
 80008a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b6:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	60d3      	str	r3, [r2, #12]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <__NVIC_GetPriorityGrouping+0x18>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	0a1b      	lsrs	r3, r3, #8
 80008d6:	f003 0307 	and.w	r3, r3, #7
}
 80008da:	4618      	mov	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	db0a      	blt.n	8000912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	490c      	ldr	r1, [pc, #48]	; (8000934 <__NVIC_SetPriority+0x4c>)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	0112      	lsls	r2, r2, #4
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	440b      	add	r3, r1
 800090c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000910:	e00a      	b.n	8000928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4908      	ldr	r1, [pc, #32]	; (8000938 <__NVIC_SetPriority+0x50>)
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	f003 030f 	and.w	r3, r3, #15
 800091e:	3b04      	subs	r3, #4
 8000920:	0112      	lsls	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	440b      	add	r3, r1
 8000926:	761a      	strb	r2, [r3, #24]
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000e100 	.word	0xe000e100
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800093c:	b480      	push	{r7}
 800093e:	b089      	sub	sp, #36	; 0x24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	f1c3 0307 	rsb	r3, r3, #7
 8000956:	2b04      	cmp	r3, #4
 8000958:	bf28      	it	cs
 800095a:	2304      	movcs	r3, #4
 800095c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3304      	adds	r3, #4
 8000962:	2b06      	cmp	r3, #6
 8000964:	d902      	bls.n	800096c <NVIC_EncodePriority+0x30>
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3b03      	subs	r3, #3
 800096a:	e000      	b.n	800096e <NVIC_EncodePriority+0x32>
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	f04f 32ff 	mov.w	r2, #4294967295
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43da      	mvns	r2, r3
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	401a      	ands	r2, r3
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000984:	f04f 31ff 	mov.w	r1, #4294967295
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	fa01 f303 	lsl.w	r3, r1, r3
 800098e:	43d9      	mvns	r1, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	4313      	orrs	r3, r2
         );
}
 8000996:	4618      	mov	r0, r3
 8000998:	3724      	adds	r7, #36	; 0x24
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
	...

080009a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009b4:	d301      	bcc.n	80009ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b6:	2301      	movs	r3, #1
 80009b8:	e00f      	b.n	80009da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <SysTick_Config+0x40>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3b01      	subs	r3, #1
 80009c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009c2:	210f      	movs	r1, #15
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	f7ff ff8e 	bl	80008e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <SysTick_Config+0x40>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <SysTick_Config+0x40>)
 80009d4:	2207      	movs	r2, #7
 80009d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	e000e010 	.word	0xe000e010

080009e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ff47 	bl	8000884 <__NVIC_SetPriorityGrouping>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b086      	sub	sp, #24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
 8000a0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a0c:	f7ff ff5e 	bl	80008cc <__NVIC_GetPriorityGrouping>
 8000a10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	68b9      	ldr	r1, [r7, #8]
 8000a16:	6978      	ldr	r0, [r7, #20]
 8000a18:	f7ff ff90 	bl	800093c <NVIC_EncodePriority>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a22:	4611      	mov	r1, r2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff5f 	bl	80008e8 <__NVIC_SetPriority>
}
 8000a2a:	bf00      	nop
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ffb2 	bl	80009a4 <SysTick_Config>
 8000a40:	4603      	mov	r3, r0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b087      	sub	sp, #28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5a:	e14c      	b.n	8000cf6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	2101      	movs	r1, #1
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f000 813e 	beq.w	8000cf0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d005      	beq.n	8000a8c <HAL_GPIO_Init+0x40>
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f003 0303 	and.w	r3, r3, #3
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d130      	bne.n	8000aee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	2203      	movs	r2, #3
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	68da      	ldr	r2, [r3, #12]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	091b      	lsrs	r3, r3, #4
 8000ad8:	f003 0201 	and.w	r2, r3, #1
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f003 0303 	and.w	r3, r3, #3
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d017      	beq.n	8000b2a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	2203      	movs	r2, #3
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d123      	bne.n	8000b7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	08da      	lsrs	r2, r3, #3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3208      	adds	r2, #8
 8000b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	220f      	movs	r2, #15
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	691a      	ldr	r2, [r3, #16]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	f003 0307 	and.w	r3, r3, #7
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	08da      	lsrs	r2, r3, #3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3208      	adds	r2, #8
 8000b78:	6939      	ldr	r1, [r7, #16]
 8000b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 0203 	and.w	r2, r3, #3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 8098 	beq.w	8000cf0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000bc0:	4a54      	ldr	r2, [pc, #336]	; (8000d14 <HAL_GPIO_Init+0x2c8>)
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	089b      	lsrs	r3, r3, #2
 8000bc6:	3302      	adds	r3, #2
 8000bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4013      	ands	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bea:	d019      	beq.n	8000c20 <HAL_GPIO_Init+0x1d4>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a4a      	ldr	r2, [pc, #296]	; (8000d18 <HAL_GPIO_Init+0x2cc>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d013      	beq.n	8000c1c <HAL_GPIO_Init+0x1d0>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a49      	ldr	r2, [pc, #292]	; (8000d1c <HAL_GPIO_Init+0x2d0>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d00d      	beq.n	8000c18 <HAL_GPIO_Init+0x1cc>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a48      	ldr	r2, [pc, #288]	; (8000d20 <HAL_GPIO_Init+0x2d4>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d007      	beq.n	8000c14 <HAL_GPIO_Init+0x1c8>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a47      	ldr	r2, [pc, #284]	; (8000d24 <HAL_GPIO_Init+0x2d8>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d101      	bne.n	8000c10 <HAL_GPIO_Init+0x1c4>
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	e008      	b.n	8000c22 <HAL_GPIO_Init+0x1d6>
 8000c10:	2307      	movs	r3, #7
 8000c12:	e006      	b.n	8000c22 <HAL_GPIO_Init+0x1d6>
 8000c14:	2303      	movs	r3, #3
 8000c16:	e004      	b.n	8000c22 <HAL_GPIO_Init+0x1d6>
 8000c18:	2302      	movs	r3, #2
 8000c1a:	e002      	b.n	8000c22 <HAL_GPIO_Init+0x1d6>
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e000      	b.n	8000c22 <HAL_GPIO_Init+0x1d6>
 8000c20:	2300      	movs	r3, #0
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	f002 0203 	and.w	r2, r2, #3
 8000c28:	0092      	lsls	r2, r2, #2
 8000c2a:	4093      	lsls	r3, r2
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c32:	4938      	ldr	r1, [pc, #224]	; (8000d14 <HAL_GPIO_Init+0x2c8>)
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	089b      	lsrs	r3, r3, #2
 8000c38:	3302      	adds	r3, #2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c40:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <HAL_GPIO_Init+0x2dc>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d003      	beq.n	8000c64 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c64:	4a30      	ldr	r2, [pc, #192]	; (8000d28 <HAL_GPIO_Init+0x2dc>)
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000c6a:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <HAL_GPIO_Init+0x2dc>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	43db      	mvns	r3, r3
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c8e:	4a26      	ldr	r2, [pc, #152]	; (8000d28 <HAL_GPIO_Init+0x2dc>)
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c94:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <HAL_GPIO_Init+0x2dc>)
 8000c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cba:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <HAL_GPIO_Init+0x2dc>)
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <HAL_GPIO_Init+0x2dc>)
 8000cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d003      	beq.n	8000ce8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ce8:	4a0f      	ldr	r2, [pc, #60]	; (8000d28 <HAL_GPIO_Init+0x2dc>)
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f47f aeab 	bne.w	8000a5c <HAL_GPIO_Init+0x10>
  }
}
 8000d06:	bf00      	nop
 8000d08:	bf00      	nop
 8000d0a:	371c      	adds	r7, #28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	40010000 	.word	0x40010000
 8000d18:	48000400 	.word	0x48000400
 8000d1c:	48000800 	.word	0x48000800
 8000d20:	48000c00 	.word	0x48000c00
 8000d24:	48001000 	.word	0x48001000
 8000d28:	58000800 	.word	0x58000800

08000d2c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	58000400 	.word	0x58000400

08000d4c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	58000400 	.word	0x58000400

08000d68 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af02      	add	r7, sp, #8
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8000d70:	f7ff fd4c 	bl	800080c <HAL_GetTick>
 8000d74:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d101      	bne.n	8000d80 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e063      	b.n	8000e48 <HAL_QSPI_Init+0xe0>
  assert_param(IS_QSPI_SSHIFT(hqspi->Init.SampleShifting));
  assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
  assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
  assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d10b      	bne.n	8000da4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff fb17 	bl	80003c8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8000d9a:	f241 3188 	movw	r1, #5000	; 0x1388
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f000 f8ba 	bl	8000f18 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	021a      	lsls	r2, r3, #8
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2120      	movs	r1, #32
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 f8b2 	bl	8000f34 <QSPI_WaitFlagStateUntilTimeout>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8000dd4:	7afb      	ldrb	r3, [r7, #11]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d131      	bne.n	8000e3e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000de4:	f023 0310 	bic.w	r3, r3, #16
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6852      	ldr	r2, [r2, #4]
 8000dec:	0611      	lsls	r1, r2, #24
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68d2      	ldr	r2, [r2, #12]
 8000df2:	4311      	orrs	r1, r2
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	6812      	ldr	r2, [r2, #0]
 8000df8:	430b      	orrs	r3, r1
 8000dfa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <HAL_QSPI_Init+0xe8>)
 8000e04:	4013      	ands	r3, r2
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	6912      	ldr	r2, [r2, #16]
 8000e0a:	0411      	lsls	r1, r2, #16
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	6952      	ldr	r2, [r2, #20]
 8000e10:	4311      	orrs	r1, r2
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	6992      	ldr	r2, [r2, #24]
 8000e16:	4311      	orrs	r1, r2
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	6812      	ldr	r2, [r2, #0]
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 0201 	orr.w	r2, r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8000e46:	7afb      	ldrb	r3, [r7, #11]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	ffe0f8fe 	.word	0xffe0f8fe

08000e54 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff fcd4 	bl	800080c <HAL_GetTick>
 8000e64:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d101      	bne.n	8000e76 <HAL_QSPI_MemoryMapped+0x22>
 8000e72:	2302      	movs	r3, #2
 8000e74:	e04c      	b.n	8000f10 <HAL_QSPI_MemoryMapped+0xbc>
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d13b      	bne.n	8000f02 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2282      	movs	r2, #130	; 0x82
 8000e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2120      	movs	r1, #32
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f000 f845 	bl	8000f34 <QSPI_WaitFlagStateUntilTimeout>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8000eae:	7dfb      	ldrb	r3, [r7, #23]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d128      	bne.n	8000f06 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f023 0108 	bic.w	r1, r3, #8
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b08      	cmp	r3, #8
 8000ed0:	d110      	bne.n	8000ef4 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	6812      	ldr	r2, [r2, #0]
 8000eda:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ef2:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8000ef4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f000 f851 	bl	8000fa2 <QSPI_Config>
 8000f00:	e001      	b.n	8000f06 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8000f02:	2302      	movs	r3, #2
 8000f04:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8000f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	4613      	mov	r3, r2
 8000f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8000f44:	e01a      	b.n	8000f7c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f4c:	d016      	beq.n	8000f7c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f4e:	f7ff fc5d 	bl	800080c <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d302      	bcc.n	8000f64 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d10b      	bne.n	8000f7c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2204      	movs	r2, #4
 8000f68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f70:	f043 0201 	orr.w	r2, r3, #1
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e00e      	b.n	8000f9a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689a      	ldr	r2, [r3, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	4013      	ands	r3, r2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	bf14      	ite	ne
 8000f8a:	2301      	movne	r3, #1
 8000f8c:	2300      	moveq	r3, #0
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d1d6      	bne.n	8000f46 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b085      	sub	sp, #20
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d009      	beq.n	8000fca <QSPI_Config+0x28>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8000fbc:	d005      	beq.n	8000fca <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	3a01      	subs	r2, #1
 8000fc8:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 80ad 	beq.w	800112e <QSPI_Config+0x18c>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d059      	beq.n	8001090 <QSPI_Config+0xee>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	6892      	ldr	r2, [r2, #8]
 8000fe4:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d02e      	beq.n	800104c <QSPI_Config+0xaa>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	049b      	lsls	r3, r3, #18
 8001004:	431a      	orrs	r2, r3
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	431a      	orrs	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	431a      	orrs	r2, r3
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	431a      	orrs	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	431a      	orrs	r2, r3
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	431a      	orrs	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	ea42 0103 	orr.w	r1, r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	430a      	orrs	r2, r1
 8001034:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800103c:	f000 8119 	beq.w	8001272 <QSPI_Config+0x2d0>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	6852      	ldr	r2, [r2, #4]
 8001048:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800104a:	e112      	b.n	8001272 <QSPI_Config+0x2d0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	431a      	orrs	r2, r3
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	431a      	orrs	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	049b      	lsls	r3, r3, #18
 8001062:	431a      	orrs	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	431a      	orrs	r2, r3
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	431a      	orrs	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	431a      	orrs	r2, r3
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	431a      	orrs	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	ea42 0103 	orr.w	r1, r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	430a      	orrs	r2, r1
 800108c:	615a      	str	r2, [r3, #20]
}
 800108e:	e0f0      	b.n	8001272 <QSPI_Config+0x2d0>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d02b      	beq.n	80010f0 <QSPI_Config+0x14e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	431a      	orrs	r2, r3
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	431a      	orrs	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	049b      	lsls	r3, r3, #18
 80010ae:	431a      	orrs	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	431a      	orrs	r2, r3
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	431a      	orrs	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	ea42 0103 	orr.w	r1, r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	430a      	orrs	r2, r1
 80010d8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80010e0:	f000 80c7 	beq.w	8001272 <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	6852      	ldr	r2, [r2, #4]
 80010ec:	619a      	str	r2, [r3, #24]
}
 80010ee:	e0c0      	b.n	8001272 <QSPI_Config+0x2d0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	431a      	orrs	r2, r3
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	431a      	orrs	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	049b      	lsls	r3, r3, #18
 8001106:	431a      	orrs	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	431a      	orrs	r2, r3
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	431a      	orrs	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	431a      	orrs	r2, r3
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	ea42 0103 	orr.w	r1, r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	430a      	orrs	r2, r1
 800112a:	615a      	str	r2, [r3, #20]
}
 800112c:	e0a1      	b.n	8001272 <QSPI_Config+0x2d0>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	6a1b      	ldr	r3, [r3, #32]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d052      	beq.n	80011dc <QSPI_Config+0x23a>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	6892      	ldr	r2, [r2, #8]
 800113e:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d02a      	beq.n	800119e <QSPI_Config+0x1fc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	431a      	orrs	r2, r3
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	431a      	orrs	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	049b      	lsls	r3, r3, #18
 800115e:	431a      	orrs	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	431a      	orrs	r2, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	431a      	orrs	r2, r3
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	431a      	orrs	r2, r3
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	431a      	orrs	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	ea42 0103 	orr.w	r1, r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	430a      	orrs	r2, r1
 8001188:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001190:	d06f      	beq.n	8001272 <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	6852      	ldr	r2, [r2, #4]
 800119a:	619a      	str	r2, [r3, #24]
}
 800119c:	e069      	b.n	8001272 <QSPI_Config+0x2d0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	431a      	orrs	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ac:	431a      	orrs	r2, r3
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	049b      	lsls	r3, r3, #18
 80011b4:	431a      	orrs	r2, r3
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	431a      	orrs	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	431a      	orrs	r2, r3
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	431a      	orrs	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	ea42 0103 	orr.w	r1, r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	615a      	str	r2, [r3, #20]
}
 80011da:	e04a      	b.n	8001272 <QSPI_Config+0x2d0>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d027      	beq.n	8001234 <QSPI_Config+0x292>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	431a      	orrs	r2, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	431a      	orrs	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	049b      	lsls	r3, r3, #18
 80011fa:	431a      	orrs	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	431a      	orrs	r2, r3
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	431a      	orrs	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	431a      	orrs	r2, r3
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	ea42 0103 	orr.w	r1, r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	430a      	orrs	r2, r1
 800121e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001226:	d024      	beq.n	8001272 <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	6852      	ldr	r2, [r2, #4]
 8001230:	619a      	str	r2, [r3, #24]
}
 8001232:	e01e      	b.n	8001272 <QSPI_Config+0x2d0>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	2b00      	cmp	r3, #0
 800123a:	d01a      	beq.n	8001272 <QSPI_Config+0x2d0>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	431a      	orrs	r2, r3
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	431a      	orrs	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	049b      	lsls	r3, r3, #18
 8001252:	431a      	orrs	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	431a      	orrs	r2, r3
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	431a      	orrs	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	ea42 0103 	orr.w	r1, r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	430a      	orrs	r2, r1
 8001270:	615a      	str	r2, [r3, #20]
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800128c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001290:	d101      	bne.n	8001296 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80012a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80012c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80012e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012f0:	d101      	bne.n	80012f6 <LL_RCC_HSE_IsReady+0x18>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <LL_RCC_HSE_IsReady+0x1a>
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001314:	6013      	str	r3, [r2, #0]
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800132e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800134c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001350:	d101      	bne.n	8001356 <LL_RCC_HSI_IsReady+0x18>
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <LL_RCC_HSI_IsReady+0x1a>
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800136a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	061b      	lsls	r3, r3, #24
 8001378:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001398:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80013b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013be:	f023 0301 	bic.w	r3, r3, #1
 80013c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80013d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d101      	bne.n	80013e8 <LL_RCC_HSI48_IsReady+0x18>
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <LL_RCC_HSI48_IsReady+0x1a>
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80013f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800141a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001422:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001426:	f023 0301 	bic.w	r3, r3, #1
 800142a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800143c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001444:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800145e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800146a:	f023 0304 	bic.w	r3, r3, #4
 800146e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b02      	cmp	r3, #2
 800148e:	d101      	bne.n	8001494 <LL_RCC_LSE_IsReady+0x18>
 8001490:	2301      	movs	r3, #1
 8001492:	e000      	b.n	8001496 <LL_RCC_LSE_IsReady+0x1a>
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80014a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80014c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014d2:	f023 0301 	bic.w	r3, r3, #1
 80014d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80014e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d101      	bne.n	80014fc <LL_RCC_LSI1_IsReady+0x18>
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <LL_RCC_LSI1_IsReady+0x1a>
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800150c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001514:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800152e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001536:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800153a:	f023 0304 	bic.w	r3, r3, #4
 800153e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b08      	cmp	r3, #8
 800155e:	d101      	bne.n	8001564 <LL_RCC_LSI2_IsReady+0x18>
 8001560:	2301      	movs	r3, #1
 8001562:	e000      	b.n	8001566 <LL_RCC_LSI2_IsReady+0x1a>
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001580:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800158c:	4313      	orrs	r3, r2
 800158e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80015a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6013      	str	r3, [r2, #0]
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80015c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015ca:	f023 0301 	bic.w	r3, r3, #1
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80015de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d101      	bne.n	80015f0 <LL_RCC_MSI_IsReady+0x16>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <LL_RCC_MSI_IsReady+0x18>
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800160e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4313      	orrs	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800162a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001634:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2bb0      	cmp	r3, #176	; 0xb0
 800163a:	d901      	bls.n	8001640 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800163c:	23b0      	movs	r3, #176	; 0xb0
 800163e:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f023 0203 	bic.w	r2, r3, #3
 800168a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4313      	orrs	r3, r2
 8001692:	608b      	str	r3, [r1, #8]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80016a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80016c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80016f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001718:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800171c:	f023 020f 	bic.w	r2, r3, #15
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	091b      	lsrs	r3, r3, #4
 8001724:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001728:	4313      	orrs	r3, r2
 800172a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800174c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800176a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001774:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800178e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80017c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017d0:	6013      	str	r3, [r2, #0]
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80017e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80017fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001808:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800180c:	d101      	bne.n	8001812 <LL_RCC_PLL_IsReady+0x18>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <LL_RCC_PLL_IsReady+0x1a>
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800183c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800186c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	f003 0303 	and.w	r3, r3, #3
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001892:	d101      	bne.n	8001898 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80018a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80018b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018b8:	d101      	bne.n	80018be <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80018ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80018d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018de:	d101      	bne.n	80018e4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80018f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001902:	d101      	bne.n	8001908 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001922:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001926:	d101      	bne.n	800192c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b08d      	sub	sp, #52	; 0x34
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e363      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0320 	and.w	r3, r3, #32
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 808d 	beq.w	8001a72 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001958:	f7ff fea2 	bl	80016a0 <LL_RCC_GetSysClkSource>
 800195c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800195e:	f7ff ff83 	bl	8001868 <LL_RCC_PLL_GetMainSource>
 8001962:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <HAL_RCC_OscConfig+0x3e>
 800196a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196c:	2b0c      	cmp	r3, #12
 800196e:	d147      	bne.n	8001a00 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001972:	2b01      	cmp	r3, #1
 8001974:	d144      	bne.n	8001a00 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e347      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001986:	f7ff fe4d 	bl	8001624 <LL_RCC_MSI_GetRange>
 800198a:	4603      	mov	r3, r0
 800198c:	429c      	cmp	r4, r3
 800198e:	d914      	bls.n	80019ba <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	4618      	mov	r0, r3
 8001996:	f000 fd03 	bl	80023a0 <RCC_SetFlashLatencyFromMSIRange>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e336      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fe27 	bl	80015fc <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fe4b 	bl	800164e <LL_RCC_MSI_SetCalibTrimming>
 80019b8:	e013      	b.n	80019e2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fe1c 	bl	80015fc <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fe40 	bl	800164e <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 fce4 	bl	80023a0 <RCC_SetFlashLatencyFromMSIRange>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e317      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80019e2:	f000 fcc9 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4aa4      	ldr	r2, [pc, #656]	; (8001c7c <HAL_RCC_OscConfig+0x344>)
 80019ea:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019ec:	4ba4      	ldr	r3, [pc, #656]	; (8001c80 <HAL_RCC_OscConfig+0x348>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe febd 	bl	8000770 <HAL_InitTick>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d039      	beq.n	8001a70 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e308      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d01e      	beq.n	8001a46 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a08:	f7ff fdc9 	bl	800159e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a0c:	f7fe fefe 	bl	800080c <HAL_GetTick>
 8001a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a14:	f7fe fefa 	bl	800080c <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e2f5      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001a26:	f7ff fdd8 	bl	80015da <LL_RCC_MSI_IsReady>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f1      	beq.n	8001a14 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fde1 	bl	80015fc <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fe05 	bl	800164e <LL_RCC_MSI_SetCalibTrimming>
 8001a44:	e015      	b.n	8001a72 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a46:	f7ff fdb9 	bl	80015bc <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a4a:	f7fe fedf 	bl	800080c <HAL_GetTick>
 8001a4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a52:	f7fe fedb 	bl	800080c <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e2d6      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001a64:	f7ff fdb9 	bl	80015da <LL_RCC_MSI_IsReady>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f1      	bne.n	8001a52 <HAL_RCC_OscConfig+0x11a>
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001a70:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d047      	beq.n	8001b0e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a7e:	f7ff fe0f 	bl	80016a0 <LL_RCC_GetSysClkSource>
 8001a82:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a84:	f7ff fef0 	bl	8001868 <LL_RCC_PLL_GetMainSource>
 8001a88:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_OscConfig+0x164>
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	2b0c      	cmp	r3, #12
 8001a94:	d108      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d105      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d134      	bne.n	8001b0e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e2b4      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab0:	d102      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x180>
 8001ab2:	f7ff fbf6 	bl	80012a2 <LL_RCC_HSE_Enable>
 8001ab6:	e001      	b.n	8001abc <HAL_RCC_OscConfig+0x184>
 8001ab8:	f7ff fc02 	bl	80012c0 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d012      	beq.n	8001aea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7fe fea2 	bl	800080c <HAL_GetTick>
 8001ac8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001acc:	f7fe fe9e 	bl	800080c <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	; 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e299      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001ade:	f7ff fbfe 	bl	80012de <LL_RCC_HSE_IsReady>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f1      	beq.n	8001acc <HAL_RCC_OscConfig+0x194>
 8001ae8:	e011      	b.n	8001b0e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7fe fe8f 	bl	800080c <HAL_GetTick>
 8001aee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af2:	f7fe fe8b 	bl	800080c <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b64      	cmp	r3, #100	; 0x64
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e286      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001b04:	f7ff fbeb 	bl	80012de <LL_RCC_HSE_IsReady>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f1      	bne.n	8001af2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d04c      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b1a:	f7ff fdc1 	bl	80016a0 <LL_RCC_GetSysClkSource>
 8001b1e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b20:	f7ff fea2 	bl	8001868 <LL_RCC_PLL_GetMainSource>
 8001b24:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_OscConfig+0x200>
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2b0c      	cmp	r3, #12
 8001b30:	d10e      	bne.n	8001b50 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d10b      	bne.n	8001b50 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e266      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fc0a 	bl	8001362 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001b4e:	e031      	b.n	8001bb4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d019      	beq.n	8001b8c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b58:	f7ff fbd3 	bl	8001302 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7fe fe56 	bl	800080c <HAL_GetTick>
 8001b60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b64:	f7fe fe52 	bl	800080c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e24d      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001b76:	f7ff fbe2 	bl	800133e <LL_RCC_HSI_IsReady>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f1      	beq.n	8001b64 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fbec 	bl	8001362 <LL_RCC_HSI_SetCalibTrimming>
 8001b8a:	e013      	b.n	8001bb4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8c:	f7ff fbc8 	bl	8001320 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7fe fe3c 	bl	800080c <HAL_GetTick>
 8001b94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b98:	f7fe fe38 	bl	800080c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e233      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001baa:	f7ff fbc8 	bl	800133e <LL_RCC_HSI_IsReady>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f1      	bne.n	8001b98 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80a3 	beq.w	8001d14 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d076      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d046      	beq.n	8001c70 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001be2:	f7ff fc7f 	bl	80014e4 <LL_RCC_LSI1_IsReady>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d113      	bne.n	8001c14 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001bec:	f7ff fc58 	bl	80014a0 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bf0:	f7fe fe0c 	bl	800080c <HAL_GetTick>
 8001bf4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001bf8:	f7fe fe08 	bl	800080c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e203      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001c0a:	f7ff fc6b 	bl	80014e4 <LL_RCC_LSI1_IsReady>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f1      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001c14:	f7ff fc78 	bl	8001508 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7fe fdf8 	bl	800080c <HAL_GetTick>
 8001c1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001c20:	f7fe fdf4 	bl	800080c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e1ef      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001c32:	f7ff fc8b 	bl	800154c <LL_RCC_LSI2_IsReady>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f1      	beq.n	8001c20 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fc95 	bl	8001570 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001c46:	f7ff fc3c 	bl	80014c2 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7fe fddf 	bl	800080c <HAL_GetTick>
 8001c4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001c52:	f7fe fddb 	bl	800080c <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e1d6      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001c64:	f7ff fc3e 	bl	80014e4 <LL_RCC_LSI1_IsReady>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f1      	bne.n	8001c52 <HAL_RCC_OscConfig+0x31a>
 8001c6e:	e051      	b.n	8001d14 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001c70:	f7ff fc16 	bl	80014a0 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7fe fdca 	bl	800080c <HAL_GetTick>
 8001c78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001c7a:	e00c      	b.n	8001c96 <HAL_RCC_OscConfig+0x35e>
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001c84:	f7fe fdc2 	bl	800080c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e1bd      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001c96:	f7ff fc25 	bl	80014e4 <LL_RCC_LSI1_IsReady>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f1      	beq.n	8001c84 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001ca0:	f7ff fc43 	bl	800152a <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001ca6:	f7fe fdb1 	bl	800080c <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e1ac      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001cb8:	f7ff fc48 	bl	800154c <LL_RCC_LSI2_IsReady>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f1      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x36e>
 8001cc2:	e027      	b.n	8001d14 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001cc4:	f7ff fc31 	bl	800152a <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc8:	f7fe fda0 	bl	800080c <HAL_GetTick>
 8001ccc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001cd0:	f7fe fd9c 	bl	800080c <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e197      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001ce2:	f7ff fc33 	bl	800154c <LL_RCC_LSI2_IsReady>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f1      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001cec:	f7ff fbe9 	bl	80014c2 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf0:	f7fe fd8c 	bl	800080c <HAL_GetTick>
 8001cf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001cf8:	f7fe fd88 	bl	800080c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e183      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001d0a:	f7ff fbeb 	bl	80014e4 <LL_RCC_LSI1_IsReady>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f1      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d05b      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d20:	4ba7      	ldr	r3, [pc, #668]	; (8001fc0 <HAL_RCC_OscConfig+0x688>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d114      	bne.n	8001d56 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001d2c:	f7fe fffe 	bl	8000d2c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d30:	f7fe fd6c 	bl	800080c <HAL_GetTick>
 8001d34:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d38:	f7fe fd68 	bl	800080c <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e163      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4a:	4b9d      	ldr	r3, [pc, #628]	; (8001fc0 <HAL_RCC_OscConfig+0x688>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d102      	bne.n	8001d64 <HAL_RCC_OscConfig+0x42c>
 8001d5e:	f7ff fb49 	bl	80013f4 <LL_RCC_LSE_Enable>
 8001d62:	e00c      	b.n	8001d7e <HAL_RCC_OscConfig+0x446>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b05      	cmp	r3, #5
 8001d6a:	d104      	bne.n	8001d76 <HAL_RCC_OscConfig+0x43e>
 8001d6c:	f7ff fb64 	bl	8001438 <LL_RCC_LSE_EnableBypass>
 8001d70:	f7ff fb40 	bl	80013f4 <LL_RCC_LSE_Enable>
 8001d74:	e003      	b.n	8001d7e <HAL_RCC_OscConfig+0x446>
 8001d76:	f7ff fb4e 	bl	8001416 <LL_RCC_LSE_Disable>
 8001d7a:	f7ff fb6e 	bl	800145a <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d014      	beq.n	8001db0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d86:	f7fe fd41 	bl	800080c <HAL_GetTick>
 8001d8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7fe fd3d 	bl	800080c <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e136      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001da4:	f7ff fb6a 	bl	800147c <LL_RCC_LSE_IsReady>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0ef      	beq.n	8001d8e <HAL_RCC_OscConfig+0x456>
 8001dae:	e013      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db0:	f7fe fd2c 	bl	800080c <HAL_GetTick>
 8001db4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001db6:	e00a      	b.n	8001dce <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db8:	f7fe fd28 	bl	800080c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e121      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001dce:	f7ff fb55 	bl	800147c <LL_RCC_LSE_IsReady>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1ef      	bne.n	8001db8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d02c      	beq.n	8001e3e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d014      	beq.n	8001e16 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dec:	f7ff face 	bl	800138c <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df0:	f7fe fd0c 	bl	800080c <HAL_GetTick>
 8001df4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001df8:	f7fe fd08 	bl	800080c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e103      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001e0a:	f7ff fae1 	bl	80013d0 <LL_RCC_HSI48_IsReady>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f1      	beq.n	8001df8 <HAL_RCC_OscConfig+0x4c0>
 8001e14:	e013      	b.n	8001e3e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e16:	f7ff faca 	bl	80013ae <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1a:	f7fe fcf7 	bl	800080c <HAL_GetTick>
 8001e1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e22:	f7fe fcf3 	bl	800080c <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e0ee      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001e34:	f7ff facc 	bl	80013d0 <LL_RCC_HSI48_IsReady>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f1      	bne.n	8001e22 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 80e4 	beq.w	8002010 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e48:	f7ff fc2a 	bl	80016a0 <LL_RCC_GetSysClkSource>
 8001e4c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	f040 80b4 	bne.w	8001fc8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0203 	and.w	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d123      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d11c      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d114      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d10d      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d05d      	beq.n	8001f72 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b0c      	cmp	r3, #12
 8001eba:	d058      	beq.n	8001f6e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0a1      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ece:	f7ff fc85 	bl	80017dc <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ed2:	f7fe fc9b 	bl	800080c <HAL_GetTick>
 8001ed6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eda:	f7fe fc97 	bl	800080c <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e092      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1ef      	bne.n	8001eda <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <HAL_RCC_OscConfig+0x68c>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f0c:	4311      	orrs	r1, r2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f12:	0212      	lsls	r2, r2, #8
 8001f14:	4311      	orrs	r1, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f1a:	4311      	orrs	r1, r2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f20:	4311      	orrs	r1, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f26:	430a      	orrs	r2, r1
 8001f28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f30:	f7ff fc45 	bl	80017be <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f44:	f7fe fc62 	bl	800080c <HAL_GetTick>
 8001f48:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7fe fc5e 	bl	800080c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e059      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ef      	beq.n	8001f4c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f6c:	e050      	b.n	8002010 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e04f      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d147      	bne.n	8002010 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f80:	f7ff fc1d 	bl	80017be <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f94:	f7fe fc3a 	bl	800080c <HAL_GetTick>
 8001f98:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7fe fc36 	bl	800080c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e031      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0ef      	beq.n	8001f9c <HAL_RCC_OscConfig+0x664>
 8001fbc:	e028      	b.n	8002010 <HAL_RCC_OscConfig+0x6d8>
 8001fbe:	bf00      	nop
 8001fc0:	58000400 	.word	0x58000400
 8001fc4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	2b0c      	cmp	r3, #12
 8001fcc:	d01e      	beq.n	800200c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	f7ff fc05 	bl	80017dc <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd2:	f7fe fc1b 	bl	800080c <HAL_GetTick>
 8001fd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fda:	f7fe fc17 	bl	800080c <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e012      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1ef      	bne.n	8001fda <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_RCC_OscConfig+0x6e4>)
 8002006:	4013      	ands	r3, r2
 8002008:	60cb      	str	r3, [r1, #12]
 800200a:	e001      	b.n	8002010 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3734      	adds	r7, #52	; 0x34
 8002016:	46bd      	mov	sp, r7
 8002018:	bd90      	pop	{r4, r7, pc}
 800201a:	bf00      	nop
 800201c:	eefefffc 	.word	0xeefefffc

08002020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e12d      	b.n	8002290 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002034:	4b98      	ldr	r3, [pc, #608]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d91b      	bls.n	800207a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b95      	ldr	r3, [pc, #596]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 0207 	bic.w	r2, r3, #7
 800204a:	4993      	ldr	r1, [pc, #588]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002052:	f7fe fbdb 	bl	800080c <HAL_GetTick>
 8002056:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002058:	e008      	b.n	800206c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800205a:	f7fe fbd7 	bl	800080c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e111      	b.n	8002290 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206c:	4b8a      	ldr	r3, [pc, #552]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d1ef      	bne.n	800205a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d016      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fb14 	bl	80016b8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002090:	f7fe fbbc 	bl	800080c <HAL_GetTick>
 8002094:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002098:	f7fe fbb8 	bl	800080c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e0f2      	b.n	8002290 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80020aa:	f7ff fbe9 	bl	8001880 <LL_RCC_IsActiveFlag_HPRE>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f1      	beq.n	8002098 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0320 	and.w	r3, r3, #32
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d016      	beq.n	80020ee <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fb0b 	bl	80016e0 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80020ca:	f7fe fb9f 	bl	800080c <HAL_GetTick>
 80020ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80020d2:	f7fe fb9b 	bl	800080c <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e0d5      	b.n	8002290 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80020e4:	f7ff fbde 	bl	80018a4 <LL_RCC_IsActiveFlag_C2HPRE>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f1      	beq.n	80020d2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d016      	beq.n	8002128 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fb04 	bl	800170c <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002104:	f7fe fb82 	bl	800080c <HAL_GetTick>
 8002108:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800210c:	f7fe fb7e 	bl	800080c <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e0b8      	b.n	8002290 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800211e:	f7ff fbd4 	bl	80018ca <LL_RCC_IsActiveFlag_SHDHPRE>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f1      	beq.n	800210c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d016      	beq.n	8002162 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fafe 	bl	800173a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800213e:	f7fe fb65 	bl	800080c <HAL_GetTick>
 8002142:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002146:	f7fe fb61 	bl	800080c <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e09b      	b.n	8002290 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002158:	f7ff fbca 	bl	80018f0 <LL_RCC_IsActiveFlag_PPRE1>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f1      	beq.n	8002146 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d017      	beq.n	800219e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff faf4 	bl	8001762 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800217a:	f7fe fb47 	bl	800080c <HAL_GetTick>
 800217e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002180:	e008      	b.n	8002194 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002182:	f7fe fb43 	bl	800080c <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e07d      	b.n	8002290 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002194:	f7ff fbbe 	bl	8001914 <LL_RCC_IsActiveFlag_PPRE2>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f1      	beq.n	8002182 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d043      	beq.n	8002232 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d106      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80021b2:	f7ff f894 	bl	80012de <LL_RCC_HSE_IsReady>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d11e      	bne.n	80021fa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e067      	b.n	8002290 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d106      	bne.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80021c8:	f7ff fb17 	bl	80017fa <LL_RCC_PLL_IsReady>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d113      	bne.n	80021fa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e05c      	b.n	8002290 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d106      	bne.n	80021ec <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80021de:	f7ff f9fc 	bl	80015da <LL_RCC_MSI_IsReady>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d108      	bne.n	80021fa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e051      	b.n	8002290 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80021ec:	f7ff f8a7 	bl	800133e <LL_RCC_HSI_IsReady>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e04a      	b.n	8002290 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fa3a 	bl	8001678 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002204:	f7fe fb02 	bl	800080c <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	e00a      	b.n	8002222 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220c:	f7fe fafe 	bl	800080c <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	; 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e036      	b.n	8002290 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	f7ff fa3d 	bl	80016a0 <LL_RCC_GetSysClkSource>
 8002226:	4602      	mov	r2, r0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	429a      	cmp	r2, r3
 8002230:	d1ec      	bne.n	800220c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d21b      	bcs.n	8002278 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002240:	4b15      	ldr	r3, [pc, #84]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 0207 	bic.w	r2, r3, #7
 8002248:	4913      	ldr	r1, [pc, #76]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	4313      	orrs	r3, r2
 800224e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002250:	f7fe fadc 	bl	800080c <HAL_GetTick>
 8002254:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	e008      	b.n	800226a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002258:	f7fe fad8 	bl	800080c <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e012      	b.n	8002290 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_RCC_ClockConfig+0x278>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d1ef      	bne.n	8002258 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002278:	f000 f87e 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 800227c:	4603      	mov	r3, r0
 800227e:	4a07      	ldr	r2, [pc, #28]	; (800229c <HAL_RCC_ClockConfig+0x27c>)
 8002280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002282:	f7fe facf 	bl	8000824 <HAL_GetTickPrio>
 8002286:	4603      	mov	r3, r0
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe fa71 	bl	8000770 <HAL_InitTick>
 800228e:	4603      	mov	r3, r0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	58004000 	.word	0x58004000
 800229c:	20000008 	.word	0x20000008

080022a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a6:	f7ff f9fb 	bl	80016a0 <LL_RCC_GetSysClkSource>
 80022aa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10a      	bne.n	80022c8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80022b2:	f7ff f9b7 	bl	8001624 <LL_RCC_MSI_GetRange>
 80022b6:	4603      	mov	r3, r0
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	4a2b      	ldr	r2, [pc, #172]	; (800236c <HAL_RCC_GetSysClockFreq+0xcc>)
 80022c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	e04b      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d102      	bne.n	80022d4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022ce:	4b28      	ldr	r3, [pc, #160]	; (8002370 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	e045      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d10a      	bne.n	80022f0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80022da:	f7fe ffd0 	bl	800127e <LL_RCC_HSE_IsEnabledDiv2>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d102      	bne.n	80022ea <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80022e4:	4b22      	ldr	r3, [pc, #136]	; (8002370 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	e03a      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80022ea:	4b22      	ldr	r3, [pc, #136]	; (8002374 <HAL_RCC_GetSysClockFreq+0xd4>)
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	e037      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80022f0:	f7ff faba 	bl	8001868 <LL_RCC_PLL_GetMainSource>
 80022f4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d003      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0x64>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d003      	beq.n	800230a <HAL_RCC_GetSysClockFreq+0x6a>
 8002302:	e00d      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002304:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002306:	60bb      	str	r3, [r7, #8]
        break;
 8002308:	e015      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800230a:	f7fe ffb8 	bl	800127e <LL_RCC_HSE_IsEnabledDiv2>
 800230e:	4603      	mov	r3, r0
 8002310:	2b01      	cmp	r3, #1
 8002312:	d102      	bne.n	800231a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002314:	4b16      	ldr	r3, [pc, #88]	; (8002370 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002316:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002318:	e00d      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800231a:	4b16      	ldr	r3, [pc, #88]	; (8002374 <HAL_RCC_GetSysClockFreq+0xd4>)
 800231c:	60bb      	str	r3, [r7, #8]
        break;
 800231e:	e00a      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002320:	f7ff f980 	bl	8001624 <LL_RCC_MSI_GetRange>
 8002324:	4603      	mov	r3, r0
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	4a0f      	ldr	r2, [pc, #60]	; (800236c <HAL_RCC_GetSysClockFreq+0xcc>)
 800232e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002332:	60bb      	str	r3, [r7, #8]
        break;
 8002334:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002336:	f7ff fa72 	bl	800181e <LL_RCC_PLL_GetN>
 800233a:	4602      	mov	r2, r0
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	fb03 f402 	mul.w	r4, r3, r2
 8002342:	f7ff fa85 	bl	8001850 <LL_RCC_PLL_GetDivider>
 8002346:	4603      	mov	r3, r0
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	3301      	adds	r3, #1
 800234c:	fbb4 f4f3 	udiv	r4, r4, r3
 8002350:	f7ff fa72 	bl	8001838 <LL_RCC_PLL_GetR>
 8002354:	4603      	mov	r3, r0
 8002356:	0f5b      	lsrs	r3, r3, #29
 8002358:	3301      	adds	r3, #1
 800235a:	fbb4 f3f3 	udiv	r3, r4, r3
 800235e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002360:	68fb      	ldr	r3, [r7, #12]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	bd90      	pop	{r4, r7, pc}
 800236a:	bf00      	nop
 800236c:	08002e2c 	.word	0x08002e2c
 8002370:	00f42400 	.word	0x00f42400
 8002374:	01e84800 	.word	0x01e84800

08002378 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002378:	b598      	push	{r3, r4, r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800237c:	f7ff ff90 	bl	80022a0 <HAL_RCC_GetSysClockFreq>
 8002380:	4604      	mov	r4, r0
 8002382:	f7ff fa02 	bl	800178a <LL_RCC_GetAHBPrescaler>
 8002386:	4603      	mov	r3, r0
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	4a03      	ldr	r2, [pc, #12]	; (800239c <HAL_RCC_GetHCLKFreq+0x24>)
 8002390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002394:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002398:	4618      	mov	r0, r3
 800239a:	bd98      	pop	{r3, r4, r7, pc}
 800239c:	08002dec 	.word	0x08002dec

080023a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2bb0      	cmp	r3, #176	; 0xb0
 80023ac:	d903      	bls.n	80023b6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	e007      	b.n	80023c6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	4a11      	ldr	r2, [pc, #68]	; (8002404 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80023c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80023c6:	f7ff f9ec 	bl	80017a2 <LL_RCC_GetAHB4Prescaler>
 80023ca:	4603      	mov	r3, r0
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	4a0d      	ldr	r2, [pc, #52]	; (8002408 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80023d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	fbb2 f3f3 	udiv	r3, r2, r3
 80023de:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	0c9c      	lsrs	r4, r3, #18
 80023ea:	f7fe fcaf 	bl	8000d4c <HAL_PWREx_GetVoltageRange>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4619      	mov	r1, r3
 80023f2:	4620      	mov	r0, r4
 80023f4:	f000 f80c 	bl	8002410 <RCC_SetFlashLatency>
 80023f8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd90      	pop	{r4, r7, pc}
 8002402:	bf00      	nop
 8002404:	08002e2c 	.word	0x08002e2c
 8002408:	08002dec 	.word	0x08002dec
 800240c:	431bde83 	.word	0x431bde83

08002410 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b093      	sub	sp, #76	; 0x4c
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800241a:	4b37      	ldr	r3, [pc, #220]	; (80024f8 <RCC_SetFlashLatency+0xe8>)
 800241c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002420:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002422:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002426:	4a35      	ldr	r2, [pc, #212]	; (80024fc <RCC_SetFlashLatency+0xec>)
 8002428:	f107 031c 	add.w	r3, r7, #28
 800242c:	ca07      	ldmia	r2, {r0, r1, r2}
 800242e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002432:	4b33      	ldr	r3, [pc, #204]	; (8002500 <RCC_SetFlashLatency+0xf0>)
 8002434:	f107 040c 	add.w	r4, r7, #12
 8002438:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800243a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800243e:	2300      	movs	r3, #0
 8002440:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002448:	d11a      	bne.n	8002480 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800244a:	2300      	movs	r3, #0
 800244c:	643b      	str	r3, [r7, #64]	; 0x40
 800244e:	e013      	b.n	8002478 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	3348      	adds	r3, #72	; 0x48
 8002456:	443b      	add	r3, r7
 8002458:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	429a      	cmp	r2, r3
 8002460:	d807      	bhi.n	8002472 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	3348      	adds	r3, #72	; 0x48
 8002468:	443b      	add	r3, r7
 800246a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800246e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002470:	e020      	b.n	80024b4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002474:	3301      	adds	r3, #1
 8002476:	643b      	str	r3, [r7, #64]	; 0x40
 8002478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800247a:	2b03      	cmp	r3, #3
 800247c:	d9e8      	bls.n	8002450 <RCC_SetFlashLatency+0x40>
 800247e:	e019      	b.n	80024b4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002480:	2300      	movs	r3, #0
 8002482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002484:	e013      	b.n	80024ae <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	3348      	adds	r3, #72	; 0x48
 800248c:	443b      	add	r3, r7
 800248e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	429a      	cmp	r2, r3
 8002496:	d807      	bhi.n	80024a8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	3348      	adds	r3, #72	; 0x48
 800249e:	443b      	add	r3, r7
 80024a0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80024a4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80024a6:	e005      	b.n	80024b4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80024a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024aa:	3301      	adds	r3, #1
 80024ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d9e8      	bls.n	8002486 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <RCC_SetFlashLatency+0xf4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 0207 	bic.w	r2, r3, #7
 80024bc:	4911      	ldr	r1, [pc, #68]	; (8002504 <RCC_SetFlashLatency+0xf4>)
 80024be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c0:	4313      	orrs	r3, r2
 80024c2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80024c4:	f7fe f9a2 	bl	800080c <HAL_GetTick>
 80024c8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80024ca:	e008      	b.n	80024de <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80024cc:	f7fe f99e 	bl	800080c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e007      	b.n	80024ee <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <RCC_SetFlashLatency+0xf4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d1ef      	bne.n	80024cc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	374c      	adds	r7, #76	; 0x4c
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd90      	pop	{r4, r7, pc}
 80024f6:	bf00      	nop
 80024f8:	08002dc0 	.word	0x08002dc0
 80024fc:	08002dd0 	.word	0x08002dd0
 8002500:	08002ddc 	.word	0x08002ddc
 8002504:	58004000 	.word	0x58004000

08002508 <LL_RCC_LSE_IsEnabled>:
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800250c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <LL_RCC_LSE_IsEnabled+0x18>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <LL_RCC_LSE_IsEnabled+0x1a>
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_RCC_LSE_IsReady>:
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b02      	cmp	r3, #2
 800253e:	d101      	bne.n	8002544 <LL_RCC_LSE_IsReady+0x18>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <LL_RCC_LSE_IsReady+0x1a>
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_RCC_SetRFWKPClockSource>:
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002560:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <LL_RCC_SetSMPSClockSource>:
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	f023 0203 	bic.w	r2, r3, #3
 800258e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4313      	orrs	r3, r2
 8002596:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <LL_RCC_SetSMPSPrescaler>:
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80025ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4313      	orrs	r3, r2
 80025be:	624b      	str	r3, [r1, #36]	; 0x24
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <LL_RCC_SetUSARTClockSource>:
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80025d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025dc:	f023 0203 	bic.w	r2, r3, #3
 80025e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_RCC_SetLPUARTClockSource>:
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002608:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800260c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_RCC_SetI2CClockSource>:
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800262c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002630:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800263c:	43db      	mvns	r3, r3
 800263e:	401a      	ands	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002648:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <LL_RCC_SetLPTIMClockSource>:
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	0c1b      	lsrs	r3, r3, #16
 8002672:	041b      	lsls	r3, r3, #16
 8002674:	43db      	mvns	r3, r3
 8002676:	401a      	ands	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	041b      	lsls	r3, r3, #16
 800267c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <LL_RCC_SetSAIClockSource>:
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800269a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <LL_RCC_SetRNGClockSource>:
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80026c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80026d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <LL_RCC_SetCLK48ClockSource>:
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80026f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <LL_RCC_SetUSBClockSource>:
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff ffe3 	bl	80026ea <LL_RCC_SetCLK48ClockSource>
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <LL_RCC_SetADCClockSource>:
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002740:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <LL_RCC_SetRTCClockSource>:
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800276c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LL_RCC_GetRTCClockSource>:
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_RCC_ForceBackupDomainReset>:
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80027a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_RCC_ReleaseBackupDomainReset>:
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80027c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <LL_RCC_PLLSAI1_Enable>:
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80027e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027f4:	6013      	str	r3, [r2, #0]
}
 80027f6:	bf00      	nop
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <LL_RCC_PLLSAI1_Disable>:
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800280e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002812:	6013      	str	r3, [r2, #0]
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <LL_RCC_PLLSAI1_IsReady>:
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800282c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002830:	d101      	bne.n	8002836 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b088      	sub	sp, #32
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800284a:	2300      	movs	r3, #0
 800284c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800284e:	2300      	movs	r3, #0
 8002850:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d034      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002866:	d021      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002868:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800286c:	d81b      	bhi.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800286e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002872:	d01d      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002874:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002878:	d815      	bhi.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800287e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002882:	d110      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800288e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002892:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002894:	e00d      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3304      	adds	r3, #4
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f947 	bl	8002b2e <RCCEx_PLLSAI1_ConfigNP>
 80028a0:	4603      	mov	r3, r0
 80028a2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80028a4:	e005      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	77fb      	strb	r3, [r7, #31]
        break;
 80028aa:	e002      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80028ac:	bf00      	nop
 80028ae:	e000      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80028b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028b2:	7ffb      	ldrb	r3, [r7, #31]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fee8 	bl	8002692 <LL_RCC_SetSAIClockSource>
 80028c2:	e001      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c4:	7ffb      	ldrb	r3, [r7, #31]
 80028c6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d046      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80028d4:	f7ff ff56 	bl	8002784 <LL_RCC_GetRTCClockSource>
 80028d8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d03c      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80028e4:	f7fe fa22 	bl	8000d2c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d105      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff ff30 	bl	8002758 <LL_RCC_SetRTCClockSource>
 80028f8:	e02e      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002902:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002904:	f7ff ff4b 	bl	800279e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002908:	f7ff ff5a 	bl	80027c0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800291a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002924:	f7ff fdf0 	bl	8002508 <LL_RCC_LSE_IsEnabled>
 8002928:	4603      	mov	r3, r0
 800292a:	2b01      	cmp	r3, #1
 800292c:	d114      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800292e:	f7fd ff6d 	bl	800080c <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002934:	e00b      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7fd ff69 	bl	800080c <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f241 3288 	movw	r2, #5000	; 0x1388
 8002944:	4293      	cmp	r3, r2
 8002946:	d902      	bls.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	77fb      	strb	r3, [r7, #31]
              break;
 800294c:	e004      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800294e:	f7ff fded 	bl	800252c <LL_RCC_LSE_IsReady>
 8002952:	4603      	mov	r3, r0
 8002954:	2b01      	cmp	r3, #1
 8002956:	d1ee      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002958:	7ffb      	ldrb	r3, [r7, #31]
 800295a:	77bb      	strb	r3, [r7, #30]
 800295c:	e001      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800295e:	7ffb      	ldrb	r3, [r7, #31]
 8002960:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d004      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fe2a 	bl	80025cc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d004      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fe35 	bl	80025f8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	2b00      	cmp	r3, #0
 8002998:	d004      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fe5d 	bl	800265e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d004      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fe52 	bl	800265e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d004      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fe2a 	bl	8002624 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d004      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fe1f 	bl	8002624 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d022      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fe8d 	bl	8002716 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a04:	d107      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a14:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a1e:	d10b      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3304      	adds	r3, #4
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 f8dd 	bl	8002be4 <RCCEx_PLLSAI1_ConfigNQ>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002a2e:	7ffb      	ldrb	r3, [r7, #31]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002a34:	7ffb      	ldrb	r3, [r7, #31]
 8002a36:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d02b      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4c:	d008      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a56:	d003      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff fe2a 	bl	80026be <LL_RCC_SetRNGClockSource>
 8002a6a:	e00a      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	2000      	movs	r0, #0
 8002a78:	f7ff fe21 	bl	80026be <LL_RCC_SetRNGClockSource>
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f7ff fe34 	bl	80026ea <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002a8a:	d107      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d022      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fe3d 	bl	800272c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aba:	d107      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aca:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ad4:	d10b      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f8dd 	bl	8002c9a <RCCEx_PLLSAI1_ConfigNR>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002ae4:	7ffb      	ldrb	r3, [r7, #31]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002aea:	7ffb      	ldrb	r3, [r7, #31]
 8002aec:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d004      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fd26 	bl	8002550 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d009      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fd45 	bl	80025a4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fd2c 	bl	800257c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002b24:	7fbb      	ldrb	r3, [r7, #30]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3720      	adds	r7, #32
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002b3a:	f7ff fe61 	bl	8002800 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b3e:	f7fd fe65 	bl	800080c <HAL_GetTick>
 8002b42:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002b44:	e009      	b.n	8002b5a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b46:	f7fd fe61 	bl	800080c <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d902      	bls.n	8002b5a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	73fb      	strb	r3, [r7, #15]
      break;
 8002b58:	e004      	b.n	8002b64 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002b5a:	f7ff fe60 	bl	800281e <LL_RCC_PLLSAI1_IsReady>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f0      	bne.n	8002b46 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d137      	bne.n	8002bda <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b94:	4313      	orrs	r3, r2
 8002b96:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002b98:	f7ff fe23 	bl	80027e2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b9c:	f7fd fe36 	bl	800080c <HAL_GetTick>
 8002ba0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002ba2:	e009      	b.n	8002bb8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ba4:	f7fd fe32 	bl	800080c <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d902      	bls.n	8002bb8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	73fb      	strb	r3, [r7, #15]
        break;
 8002bb6:	e004      	b.n	8002bc2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002bb8:	f7ff fe31 	bl	800281e <LL_RCC_PLLSAI1_IsReady>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d1f0      	bne.n	8002ba4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d108      	bne.n	8002bda <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002bf0:	f7ff fe06 	bl	8002800 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002bf4:	f7fd fe0a 	bl	800080c <HAL_GetTick>
 8002bf8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002bfa:	e009      	b.n	8002c10 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bfc:	f7fd fe06 	bl	800080c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d902      	bls.n	8002c10 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c0e:	e004      	b.n	8002c1a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002c10:	f7ff fe05 	bl	800281e <LL_RCC_PLLSAI1_IsReady>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d137      	bne.n	8002c90 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c34:	4313      	orrs	r3, r2
 8002c36:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002c4e:	f7ff fdc8 	bl	80027e2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c52:	f7fd fddb 	bl	800080c <HAL_GetTick>
 8002c56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002c58:	e009      	b.n	8002c6e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c5a:	f7fd fdd7 	bl	800080c <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d902      	bls.n	8002c6e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	73fb      	strb	r3, [r7, #15]
        break;
 8002c6c:	e004      	b.n	8002c78 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002c6e:	f7ff fdd6 	bl	800281e <LL_RCC_PLLSAI1_IsReady>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d1f0      	bne.n	8002c5a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d108      	bne.n	8002c90 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002ca6:	f7ff fdab 	bl	8002800 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002caa:	f7fd fdaf 	bl	800080c <HAL_GetTick>
 8002cae:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002cb0:	e009      	b.n	8002cc6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cb2:	f7fd fdab 	bl	800080c <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d902      	bls.n	8002cc6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc4:	e004      	b.n	8002cd0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002cc6:	f7ff fdaa 	bl	800281e <LL_RCC_PLLSAI1_IsReady>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f0      	bne.n	8002cb2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d137      	bne.n	8002d46 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cea:	4313      	orrs	r3, r2
 8002cec:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d00:	4313      	orrs	r3, r2
 8002d02:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002d04:	f7ff fd6d 	bl	80027e2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d08:	f7fd fd80 	bl	800080c <HAL_GetTick>
 8002d0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002d0e:	e009      	b.n	8002d24 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d10:	f7fd fd7c 	bl	800080c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d902      	bls.n	8002d24 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	73fb      	strb	r3, [r7, #15]
        break;
 8002d22:	e004      	b.n	8002d2e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002d24:	f7ff fd7b 	bl	800281e <LL_RCC_PLLSAI1_IsReady>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d1f0      	bne.n	8002d10 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d108      	bne.n	8002d46 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d38:	691a      	ldr	r2, [r3, #16]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d42:	4313      	orrs	r3, r2
 8002d44:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <__libc_init_array>:
 8002d50:	b570      	push	{r4, r5, r6, lr}
 8002d52:	4d0d      	ldr	r5, [pc, #52]	; (8002d88 <__libc_init_array+0x38>)
 8002d54:	4c0d      	ldr	r4, [pc, #52]	; (8002d8c <__libc_init_array+0x3c>)
 8002d56:	1b64      	subs	r4, r4, r5
 8002d58:	10a4      	asrs	r4, r4, #2
 8002d5a:	2600      	movs	r6, #0
 8002d5c:	42a6      	cmp	r6, r4
 8002d5e:	d109      	bne.n	8002d74 <__libc_init_array+0x24>
 8002d60:	4d0b      	ldr	r5, [pc, #44]	; (8002d90 <__libc_init_array+0x40>)
 8002d62:	4c0c      	ldr	r4, [pc, #48]	; (8002d94 <__libc_init_array+0x44>)
 8002d64:	f000 f820 	bl	8002da8 <_init>
 8002d68:	1b64      	subs	r4, r4, r5
 8002d6a:	10a4      	asrs	r4, r4, #2
 8002d6c:	2600      	movs	r6, #0
 8002d6e:	42a6      	cmp	r6, r4
 8002d70:	d105      	bne.n	8002d7e <__libc_init_array+0x2e>
 8002d72:	bd70      	pop	{r4, r5, r6, pc}
 8002d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d78:	4798      	blx	r3
 8002d7a:	3601      	adds	r6, #1
 8002d7c:	e7ee      	b.n	8002d5c <__libc_init_array+0xc>
 8002d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d82:	4798      	blx	r3
 8002d84:	3601      	adds	r6, #1
 8002d86:	e7f2      	b.n	8002d6e <__libc_init_array+0x1e>
 8002d88:	08002e6c 	.word	0x08002e6c
 8002d8c:	08002e6c 	.word	0x08002e6c
 8002d90:	08002e6c 	.word	0x08002e6c
 8002d94:	08002e70 	.word	0x08002e70

08002d98 <memset>:
 8002d98:	4402      	add	r2, r0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d100      	bne.n	8002da2 <memset+0xa>
 8002da0:	4770      	bx	lr
 8002da2:	f803 1b01 	strb.w	r1, [r3], #1
 8002da6:	e7f9      	b.n	8002d9c <memset+0x4>

08002da8 <_init>:
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002daa:	bf00      	nop
 8002dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dae:	bc08      	pop	{r3}
 8002db0:	469e      	mov	lr, r3
 8002db2:	4770      	bx	lr

08002db4 <_fini>:
 8002db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db6:	bf00      	nop
 8002db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dba:	bc08      	pop	{r3}
 8002dbc:	469e      	mov	lr, r3
 8002dbe:	4770      	bx	lr
